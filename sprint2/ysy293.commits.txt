server.js

^8472374 (Jason West        2024-10-03 14:44:50 -0400  1) const express = require('express');
^8472374 (Jason West        2024-10-03 14:44:50 -0400  3) const port = 8080;    //given port number
^8472374 (Jason West        2024-10-03 14:44:50 -0400  4)
^8472374 (Jason West        2024-10-03 14:44:50 -0400 59) //defining the /api/hello route
^8472374 (Jason West        2024-10-03 14:44:50 -0400 61)       res.send('hello world');
^8472374 (Jason West        2024-10-03 14:44:50 -0400 62) });
^8472374 (Jason West        2024-10-03 14:44:50 -0400 63)
^8472374 (Jason West        2024-10-03 14:44:50 -0400 65) //starting the server and listening on port 8080
^8472374 (Jason West        2024-10-03 14:44:50 -0400 67)       //using this to print the URL we can access the server with
^8472374 (Jason West        2024-10-03 14:44:50 -0400 68)       console.log(`Server is running on http://localhost:${port}`);
^8472374 (Jason West        2024-10-03 14:44:50 -0400 69) });

mpacking.js

5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  1) // Examples of binary message packing using Java
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  2)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  3) //using DataView
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  4) function packMessageWithDataView(message_type, version) {
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  5)      const buffer = new ArrayBuffer(8); // 4 bytes for message type and 4 bytes for version
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  6)      const dataView = new DataView(buffer);
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  7)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  8)      dataView.setInt32(0, message_type, true); // true for little-endian
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400  9)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 10)      dataView.setInt32(4, version, true); // true for little-endian
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 11)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 12)      return buffer; // Return the packed buffer
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 13) }
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 14)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 15) //using Node.js
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 16) const { Buffer } = require('buffer');
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 17) function packMessageWithNode(message_type, version) {
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 18)      const buffer = Buffer.alloc(8);
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 19)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 20)      buffer.writeInt32LE(message_type, 0); // little-endian
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 21)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 22)      buffer.writeInt32LE(version, 4); // little-endian
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 23)      return buffer;
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 24) }
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 25)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 26) //testing with DataView
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 27) const packedMessageWithDataView = packMessageWithDataView(1, 3);
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 28) console.log("Packed message with DataView:", new Uint8Array(packedMessageWithDataView));
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 29)
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 30) //testing with Node.js
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 31) const packedMessageWithNode = packMessageWithNode(1, 3);
5dbd91bc (Jason West 2024-10-15 14:36:36 -0400 32) console.log("Packed message with Node.js:", packedMessageWithNode);

client.js

3b404087 (jasontwest 2024-10-16 13:41:51 -0400  1) //Example client class
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  2)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  3) class notJSONClient {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  4)     constructor(base_url) {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  5)         this.base_url = base_url;
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  6)     }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  7)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  8)     encodeMessage(message_type, version, fields) {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400  9)            //lowkey random logic for now
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 10)            let metadata = {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 11)                      type: message_type,
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 12)                      version: version,
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 13)                      fields: fields
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 14)            };
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 15)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 16)            //converting metadata object into a JSON string then converting to binary (Buffer)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 17)            let encoded_message = Buffer.from(JSON.stringify(metadata));
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 18)                return encoded_message;
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 19)         }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 20)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 21)         decodeMessage(encodedMessage) {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 22)            // Simulate decoding the message from binary buffer
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 23)            let decoded_message = JSON.parse(encodedMessage.toString());
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 24)                return decoded_message;
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 25)         }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 26)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 27)         async sendMessage(message_type, version, fields) {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 28)                let encoded_message = this.encodeMessage(message_type, version, fields);
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 29)                let response = await fetch(`${this.base_url}/api/sendMessage`, {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 30)                          method: 'POST',
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 31)                          body: encoded_message,
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 32)                          headers: {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 33)                              'Content-Type': 'application/octet-stream'
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 34)                          }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 35)                });
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 36)                if (!response.ok) {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 37)                          throw new Error('Failed to send message');
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 38)                }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 39)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 40)                let response_body = await response.arrayBuffer();
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 41)                let decoded_response = this.decodeMessage(Buffer.from(response_body));
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 42)                return decoded_response;
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 43)         }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 44)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 45)         async recieveMessage() {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 46)            let response = await fetch(`${this.base_url}/api/receiveMessage`, {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 47)                      method: 'GET'
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 48)            });
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 49)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 50)            let response_body = await response.arrayBuffer();
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 51)            let decoded_message = this.decodeMessage(Buffer.from(response_body));
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 52)            return decoded_message;
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 53)     }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 54) }
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 55)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 56) const client = new notJSONClient('http://localhost:8080');
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 57)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 58) client.sendMessage(1, 1, { field1: 'f1', field2: 'f2' })
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 59)     .then(response => {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 60)            console.log('Received response from server:', response);
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 61)     })
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 62)
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 63)     .catch(error => {
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 64)            console.error('Error sending message:', error);
3b404087 (jasontwest 2024-10-16 13:41:51 -0400 65)     });
