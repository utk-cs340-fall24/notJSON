#include <stdint.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <stdio.h>
#include <unistd.h>

#include "{{ output_file.split('/')[1].split('.')[0] }}.h"

{% for message in messages -%}
  size_t {{ message.name }}_pack(const {{ message.name }}* struct_{{ message.name }}, u8** out) {
  size_t metadata_size = sizeof(u8) * 3 + (({{ message.metadata.optionals_count }} + 7) / 8) * sizeof(u8);
  ssize_t optional_index = 0;

  {% set has_array_fields = namespace(value=False) %}
  {% for field in message.fields %}
    {% if field.array %}
      {% set has_array_fields.value = True %}
    {% endif %}
  {% endfor %}

  {% if has_array_fields.value %}
    size_t variable_space = 0;
  {% endif %}


  {% for field in message.fields %}
    {% if field.array %}
      {% if not field.required %}
        if (struct_{{ message.name }}->{{ field.name }}_present) {
      {% endif %}
      {% if field != message.fields[0] and primitive_mapping[field.type_field].value != 1 %}
        variable_space += sizeof({{ field.type_field }}) - (variable_space % sizeof({{ field.type_field }}));
      {% endif %}
      variable_space += struct_{{ message.name }}->{{ field.name }}_count * sizeof({{ field.type_field }});
      {% if not field.required %}
        }
      {% endif %}
    {% endif %}
  {% endfor %}
  if (!*out) {
  {% if has_array_fields.value %}
    *out = calloc(1, {{ message.name.upper() }}_PACKED_SIZE + metadata_size + variable_space);
  {% else %}
    *out = calloc(1, {{ message.name.upper() }}_PACKED_SIZE + metadata_size);
  {% endif %}
  }

  {% if has_array_fields.value %}
  variable_space = {{ message.name.upper() }}_PACKED_SIZE + metadata_size;
  {% endif %}
  u8* optional = *out + 3;
  (*out)[0] = {{ message.metadata.message_identifier }};
  (*out)[1] = {{ message.metadata.version_number }};

  {% set current_offset = namespace(value=0) %}
  {% for field in message.fields %}
    {% if not field.padding %}
      // {{ field.name }}
      {% if not field.required %}
        if (struct_{{ message.name }}->{{ field.name }}_present) {
        optional[optional_index / 8] |= (1 << optional_index % 8);
      {% endif %}
      {% if field.array %}
        {% if primitive_mapping[field.type_field].value != 1 %}
          variable_space += sizeof({{ field.type_field }}) - (variable_space % sizeof({{ field.type_field }}));
        {% endif %}
        memcpy(*out + variable_space, struct_{{ message.name }}->{{ field.name }}, struct_{{ message.name }}->{{ field.name }}_count * sizeof(*struct_{{ message.name }}->{{ field.name }}));
        *(u32*)(*out + {{ current_offset.value }} + metadata_size) = variable_space;
        *(u32*)(*out + {{ current_offset.value }} + 4 + metadata_size) = struct_{{ message.name }}->{{ field.name }}_count;
        variable_space += struct_{{ message.name }}->{{ field.name }}_count * sizeof(*struct_{{ message.name }}->{{ field.name }});
      {% else %}
        memcpy(*out + {{ current_offset.value }} + metadata_size, &struct_{{ message.name }}->{{ field.name }}, {{ field.size }});
      {% endif %}
      {% if not field.required %}
        } else {
        optional[optional_index / 8] &= ~(1 << optional_index % 8);
        }
        ++optional_index;
      {% endif %}
    {% endif %}
    {% set current_offset.value = current_offset.value + field.size %}
  {% endfor %}

  {% if has_array_fields.value %}
    return variable_space;
  {% else %}
    return {{ message.name.upper() }}_PACKED_SIZE + metadata_size;
  {% endif %}
  }

  {% set current_offset.value = 0 %}
  {% set current_optional = namespace(value = 0) %}
  {% set metadata_offset = 3 +(message.metadata.optionals_count + 7) // 8 %}
  {% for field in message.fields %}
    {% if not field.padding %}
      {% if field.array %}
        {{ field.type_field }}* get_{{message.name}}_{{ field.name }}(const u8* message) {
        return ({{ field.type_field }}*)(message + *(u32*)(message + {{ current_offset.value }} + {{ metadata_offset }}));
        }
        u32 get_{{message.name}}_{{field.name}}_length(const u8* message) {
        return *(u32*)(message + {{ current_offset.value }} + 4 + {{ metadata_offset }});
        }
      {% else %}
        {{ field.type_field }} get_{{message.name}}_{{ field.name }}(const u8* message) {
        return *({{field.type_field}}*)(message + {{ current_offset.value }} + {{ metadata_offset }});
        }
      {% endif %}
      {% if not field.required %}
        bool get_{{ message.name }}_{{ field.name }}_present(const u8* message) {
        return ((message + 2)[{{ current_optional.value }} / 8] >> ({{ current_optional.value }} % 8)) & 0x1;
        }
        {% set current_optional.value = current_optional.value + 1 %}
      {% endif %}
    {% endif %}
    {% set current_offset.value = current_offset.value + field.size %}

  {% endfor %}

  {{ message.name }} {{ message.name }}_unpack(const u8* message) {
  return ({{ message.name }}){
  {% for field in message.fields %}
    {% if not field.padding %}
      {% if field.required %}
        .{{ field.name }} = get_{{ message.name }}_{{ field.name }}(message),
        {% if field.array %}
          .{{ field.name }}_count = get_{{ message.name }}_{{field.name}}_length(message),
        {% endif %}
      {% else %}
        .{{ field.name }} = get_{{message.name}}_{{field.name}}_present(message) ? get_{{ message.name }}_{{ field.name }}(message) : 0,
        {% if field.array %}
          .{{ field.name }}_count = get_{{message.name}}_{{field.name}}_present(message) ? get_{{ message.name }}_{{field.name}}_length(message) : 0,
        {% endif %}
        .{{ field.name }}_present = get_{{message.name}}_{{field.name}}_present(message),
      {% endif %}
    {% endif %}
  {% endfor %}
  };
  }
{% endfor %}

{% for procedure in procedures %}
  /* {{ procedure.description }} */
  size_t {{ procedure.name }}(
  {% for param in procedure.parameters %}
    {{ param.type_field }} {{ param.name }},
  {% endfor %}
  u8 **out
  ) {
  {{ procedure.return_values[0].type_field }} return_val;

  return {{ procedure.return_values[0].type_field }}_pack(&return_val, out);
  }
{% endfor %}

#define PORT 8080
#define BUFFER_SIZE 1024

// Function to handle incoming data
size_t handle_request(const u8 *input, u8 **output) {
  switch (input[2]) {
    {% for element in procedures %}
  case {{ loop.index0 }}: {
    {{ element.parameters[0].type_field }} arg = {{ element.parameters[0].type_field }}_unpack(input);
      return {{ element.name }}(arg, output);
  }
    {% endfor %}
      default:
      puts("unsupported operation");
  }

    return 0;
}

int main() {
  int server_fd, new_socket;
  struct sockaddr_in address;
  int opt = 1;
  int addrlen = sizeof(address);
  u8 buffer[BUFFER_SIZE] = {0};
  u8* response = NULL;

  // Create socket file descriptor
  if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
    perror("socket failed");
    exit(EXIT_FAILURE);
  }

  // Set socket options
  if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
    perror("setsockopt");
    exit(EXIT_FAILURE);
  }

  // Define the address
  address.sin_family = AF_INET;
  address.sin_addr.s_addr = INADDR_ANY;
  address.sin_port = htons(PORT);

  // Bind the socket to the address
  if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
    perror("bind failed");
    exit(EXIT_FAILURE);
  }

  // Listen for incoming connections
  if (listen(server_fd, 3) < 0) {
    perror("listen");
    exit(EXIT_FAILURE);
  }

  printf("Server is listening on port %d\n", PORT);

  while (1) {
    // Accept a connection
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address,
                             (socklen_t *)&addrlen)) < 0) {
      perror("accept");
      exit(EXIT_FAILURE);
    }

    // Read data from the client
    int bytes_read = read(new_socket, buffer, BUFFER_SIZE);
    if (bytes_read < 0) {
      perror("read");
      close(new_socket);
      continue;
    }

    // Null terminate the received data
    buffer[bytes_read] = '\0';

    // Handle the request
    size_t response_size = handle_request(buffer, &response);

    // Send the response back to the client
    send(new_socket, response, response_size, 0);

    // Close the socket for this client
    close(new_socket);
  }

  return 0;
}
