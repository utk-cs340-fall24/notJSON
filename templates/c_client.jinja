#include <stdint.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <unistd.h>
#include <arpa/inet.h>


#include "{{ output_file.split('/')[1].split('.')[0] }}.h"

#define SERVER_IP "127.0.0.1" // Localhost
#define SERVER_PORT 8080       // Port number to connect to
#define BUFFER_SIZE 256        // Size of send and receive buffers


{% for message in messages -%}
  size_t {{ message.name }}_pack(const {{ message.name }}* struct_{{ message.name }}, u8** out) {
  size_t metadata_size = sizeof(u8) * 3 + (({{ message.metadata.optionals_count }} + 7) / 8) * sizeof(u8);
  ssize_t optional_index = 0;

  {% set has_array_fields = namespace(value=False) %}
  {% for field in message.fields %}
    {% if field.array %}
      {% set has_array_fields.value = True %}
    {% endif %}
  {% endfor %}

  {% if has_array_fields.value %}
    size_t variable_space = 0;
  {% endif %}


  {% for field in message.fields %}
    {% if field.array %}
      {% if not field.required %}
        if (struct_{{ message.name }}->{{ field.name }}_present) {
      {% endif %}
      {% if field != message.fields[0] and primitive_mapping[field.type_field].value != 1 %}
        variable_space += sizeof({{ field.type_field }}) - (variable_space % sizeof({{ field.type_field }}));
      {% endif %}
      variable_space += struct_{{ message.name }}->{{ field.name }}_count * sizeof({{ field.type_field }});
      {% if not field.required %}
        }
      {% endif %}
    {% endif %}
  {% endfor %}
  if (!*out) {
  {% if has_array_fields.value %}
    *out = calloc(1, {{ message.name.upper() }}_PACKED_SIZE + metadata_size + variable_space);
  {% else %}
    *out = calloc(1, {{ message.name.upper() }}_PACKED_SIZE + metadata_size);
  {% endif %}
  }

  {% if has_array_fields.value %}
  variable_space = {{ message.name.upper() }}_PACKED_SIZE + metadata_size;
  {% endif %}
  u8* optional = *out + 3;
  (*out)[0] = {{ message.metadata.message_identifier }};
  (*out)[1] = {{ message.metadata.version_number }};

  {% set current_offset = namespace(value=0) %}
  {% for field in message.fields %}
    {% if not field.padding %}
      // {{ field.name }}
      {% if not field.required %}
        if (struct_{{ message.name }}->{{ field.name }}_present) {
        optional[optional_index / 8] |= (1 << optional_index % 8);
      {% endif %}
      {% if field.array %}
        {% if primitive_mapping[field.type_field].value != 1 %}
          variable_space += sizeof({{ field.type_field }}) - (variable_space % sizeof({{ field.type_field }}));
        {% endif %}
        memcpy(*out + variable_space, struct_{{ message.name }}->{{ field.name }}, struct_{{ message.name }}->{{ field.name }}_count * sizeof(*struct_{{ message.name }}->{{ field.name }}));
        *(u32*)(*out + {{ current_offset.value }} + metadata_size) = variable_space;
        *(u32*)(*out + {{ current_offset.value }} + 4 + metadata_size) = struct_{{ message.name }}->{{ field.name }}_count;
        variable_space += struct_{{ message.name }}->{{ field.name }}_count * sizeof(*struct_{{ message.name }}->{{ field.name }});
      {% else %}
        memcpy(*out + {{ current_offset.value }} + metadata_size, &struct_{{ message.name }}->{{ field.name }}, {{ field.size }});
      {% endif %}
      {% if not field.required %}
        } else {
        optional[optional_index / 8] &= ~(1 << optional_index % 8);
        }
        ++optional_index;
      {% endif %}
    {% endif %}
    {% set current_offset.value = current_offset.value + field.size %}
  {% endfor %}

  {% if has_array_fields.value %}
    return variable_space;
  {% else %}
    return {{ message.name.upper() }}_PACKED_SIZE + metadata_size;
  {% endif %}
  }

  {% set current_offset.value = 0 %}
  {% set current_optional = namespace(value = 0) %}
  {% set metadata_offset = 3 +(message.metadata.optionals_count + 7) // 8 %}
  {% for field in message.fields %}
    {% if not field.padding %}
      {% if field.array %}
        {{ field.type_field }}* get_{{message.name}}_{{ field.name }}(const u8* message) {
        return ({{ field.type_field }}*)(message + *(u32*)(message + {{ current_offset.value }} + {{ metadata_offset }}));
        }
        u32 get_{{message.name}}_{{field.name}}_length(const u8* message) {
        return *(u32*)(message + {{ current_offset.value }} + 4 + {{ metadata_offset }});
        }
      {% else %}
        {{ field.type_field }} get_{{message.name}}_{{ field.name }}(const u8* message) {
        return *({{field.type_field}}*)(message + {{ current_offset.value }} + {{ metadata_offset }});
        }
      {% endif %}
      {% if not field.required %}
        bool get_{{ message.name }}_{{ field.name }}_present(const u8* message) {
        return ((message + 2)[{{ current_optional.value }} / 8] >> ({{ current_optional.value }} % 8)) & 0x1;
        }
        {% set current_optional.value = current_optional.value + 1 %}
      {% endif %}
    {% endif %}
    {% set current_offset.value = current_offset.value + field.size %}

  {% endfor %}

  {{ message.name }} {{ message.name }}_unpack(const u8* message) {
  return ({{ message.name }}){
  {% for field in message.fields %}
    {% if not field.padding %}
      {% if field.required %}
        .{{ field.name }} = get_{{ message.name }}_{{ field.name }}(message),
        {% if field.array %}
          .{{ field.name }}_count = get_{{ message.name }}_{{field.name}}_length(message),
        {% endif %}
      {% else %}
        .{{ field.name }} = get_{{message.name}}_{{field.name}}_present(message) ? get_{{ message.name }}_{{ field.name }}(message) : 0,
        {% if field.array %}
          .{{ field.name }}_count = get_{{message.name}}_{{field.name}}_present(message) ? get_{{ message.name }}_{{field.name}}_length(message) : 0,
        {% endif %}
        .{{ field.name }}_present = get_{{message.name}}_{{field.name}}_present(message),
      {% endif %}
    {% endif %}
  {% endfor %}
  };
  }
{% endfor %}

{% for procedure in procedures %}
  /* {{ procedure.description }} */
  {{ procedure.return_values[0].type_field }} {{ procedure.name }}(
  {% for param in procedure.parameters %}
    {% if param != procedure.parameters[-1] %}
      {{ param.type_field }} {{ param.name }},
    {% else %}
      {{ param.type_field }} {{ param.name }}
    {% endif %}
  {% endfor %}
  ) {
    int sock;
    struct sockaddr_in server_addr;
    uint8_t* send_buffer = NULL;
    size_t send_buffer_size;
    uint8_t recv_buffer[BUFFER_SIZE];
    ssize_t bytes_sent, bytes_received;

    send_buffer_size = {{ procedure.parameters[0].type_field }}_pack(&{{ procedure.parameters[0].name }}, &send_buffer);
  send_buffer[2] = {{ loop.index0 }};

    // Step 1: Create a socket
    sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        perror("Socket creation failed"); // Print error message
        exit(1);
    }
    printf("Socket created successfully.\n");

    // Step 2: Prepare the server address structure
    memset(&server_addr, 0, sizeof(server_addr)); // Clear the structure
    server_addr.sin_family = AF_INET; // IPv4
    server_addr.sin_port = htons(SERVER_PORT); // Convert port to network byte order

    // Convert IPv4 address from text to binary form
    if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
        perror("Invalid address / Address not supported");
        close(sock); // Close the socket before exiting
        exit(1);
    }
    printf("Server address set to %s:%d.\n", SERVER_IP, SERVER_PORT);

    // Step 3: Connect to the server
    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed"); // Print error message
        close(sock); // Close the socket
        exit(1);
    }
    printf("Connected to the server at %s:%d.\n", SERVER_IP, SERVER_PORT);

    // Step 4: Send data to the server
    printf("Sending data: ");
    for (size_t i = 0; i < send_buffer_size; i++) {
        printf("%02x ", send_buffer[i]); // Print data being sent
    }
    printf("\n");

    bytes_sent = send(sock, send_buffer, sizeof(send_buffer), 0);
    if (bytes_sent < 0) {
        perror("Send failed"); // Print error message
        close(sock); // Close the socket
        exit(1);
    }
    printf("Sent %zd bytes to the server.\n", bytes_sent);

    // Step 5: Receive response from the server
    bytes_received = recv(sock, recv_buffer, sizeof(recv_buffer), 0);
    if (bytes_received < 0) {
        perror("Receive failed"); // Print error message
        close(sock); // Close the socket
        exit(1);
    }

    // Step 6: Print the received data
    printf("Received %zd bytes from the server: ", bytes_received);
    for (ssize_t i = 0; i < bytes_received; i++) {
        printf("%02x ", recv_buffer[i]); // Print each byte of received data
    }
    printf("\n");

    // Step 7: Close the socket
    close(sock);
    printf("Socket closed. Exiting program.\n");

    {{ procedure.return_values[0].type_field }} ret_val = {{ procedure.return_values[0].type_field }}_unpack(recv_buffer);

    return ret_val;
  }
{% endfor %}

int main() {

    return 0; // Exit successfully
}
