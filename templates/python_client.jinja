from dataclasses import dataclass
import ctypes
import requests
import struct
from typing import TypeAlias
import socket

string : TypeAlias = str
char : TypeAlias = str
i64 : TypeAlias = ctypes.c_int64
u64 : TypeAlias = ctypes.c_uint64
i32 : TypeAlias = ctypes.c_int32
u32 : TypeAlias = ctypes.c_uint32
i16 : TypeAlias = ctypes.c_int16
u16 : TypeAlias = ctypes.c_uint16
i8 : TypeAlias = ctypes.c_int8
u8 : TypeAlias = ctypes.c_uint8
size_t : TypeAlias = ctypes.c_size_t




{% for message in messages -%}
@dataclass
class {{ message.name }} :
  {% for field in message.fields %}
    {% if field.array %}
    {{field.name}} : list[{{ field.type_field}}] 
    {% else %}
    {% if field.name != "padding" %}
    {{ field.name }} : {{ field.type_field }}
    {% endif %}
    {% endif %}
  {% endfor %}

{% endfor %}

{% for message in messages %}

def {{ message.name }}_unpack(binary_string) -> {{ message.name }}:
  format_string_mapping = {
    'string' : 'q',
    'char' : 'c',
    'i64' : 'q',
    'ui64' : 'Q',
    'i32' : 'i',
    'ui32' : 'I',
    'i16' : 'h',
    'ui6' : 'H',
    'i8' : 'b',
    'u8' : 'B'
  }

  format_string = '<'
  {% for field in message.fields %}
  {% if field.array %}
  {{field.name}} : list[{{ field.type_field}}] 
  {% else %}
  {% if field.name != "padding" %}
  format_string += format_string_mapping['{{ field.type_field}}']
  {% endif %}
  {% endif %}
  {% endfor %}

  (
    {% for field in message.fields %}
    {% if field.name != "padding" %}
    {{field.name}},
    {% endif %}
    {% endfor %}
  ) = struct.unpack(format_string, binary_string) 

  object = {{ message.name }} (
    {% for field in message.fields %}
    {% if field.name != "padding" %}
    {{field.name}},
    {% endif %}
    {% endfor %}
  ) 

  return object


def {{ message.name }}_pack({{ message.name }}_var):
  format_string_mapping = {
      'string' : 'q',
      'char' : 'B',
      'i64' : 'q',
      'ui64' : 'Q',
      'i32' : 'i',
      'ui32' : 'I',
      'i16' : 'h',
      'ui6' : 'H',
      'i8' : 'b',
      'u8' : 'B'
  }

  format_string = '<'
  {% for field in message.fields %}
  {% if field.array %}
  {{field.name}} : list[{{ field.type_field}}] 
  {% else %}
  {% if field.name != "padding" %}
  format_string += format_string_mapping['{{ field.type_field}}']
  {% endif %}
  {% endif %}
  {% endfor %}

  bin_string = struct.pack(format_string,
                            {% for field in message.fields %}
                            {% if field.name != "padding" %}
                            getattr({{ message.name }}_var, '{{field.name}}'),
                            {% endif %}
                            {% endfor %}
                            )

  return bin_string

{% endfor %}

def main():
    print("hello")

    #make example http get request
    x = requests.get('https://google.com')
    print('Google get request status code: ')
    print(x.status_code)


    {% for message in messages -%}
    #prompt users to populate example instance of {{ message.name }} class
    variables = (vars(operation_msg)['__annotations__'])
    var_names = list(variables.keys())  
    var_types = list(variables.values())  

    ex_{{message.name}}_input_list = []

    for index, name in enumerate(var_names):
        ex_{{message.name}}_input_list.append(
             int(input("Enter value for " + name + ': ')) )

    ex_{{message.name}} = {{message.name}}(
      {% for field in message.fields %}
      {% if field.array %}
      {{field.name}} : list[{{ field.type_field}}] 
      {% else %}
      {% if field.name != "padding" %}
      ex_{{message.name}}_input_list[{{loop.index0}}],
      {% endif %}
      {% endif %}
      {% endfor %}
    )

    bin_string = operation_msg_pack(ex_operation_msg)

    print(f'binary string: {bin_string}')

    s = socket.socket()

    # Define the port on which you want to connect
    port = 60221 

    # connect to the server on local computer
    s.connect(('127.0.0.1', port))

    # send the binary string that represents the packaged message
    s.send(bin_string)
    # close the connection
    s.close()

    {% endfor %}

if __name__ == '__main__':
    main()
