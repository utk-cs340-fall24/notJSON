`script.py`
^3fde038 (Jackson Mowry 2024-09-17 08:21:03 -0400   1) #!/usr/bin/env python3
^3fde038 (Jackson Mowry 2024-09-17 08:21:03 -0400   2)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400   3) import xmltodict
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400   4) import argparse
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400   5) import queue
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400   7) from jinja2 import Environment, FileSystemLoader
^3fde038 (Jackson Mowry 2024-09-17 08:21:03 -0400   8) from typing import Any
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400   9) from dataclasses import dataclass, field
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  10) from enum import Enum
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  11)
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  12) # Creates a mapping of typename to type size
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  13) class Primitive(Enum):
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  14)     NJ_STRING = 8
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  15)     NJ_I64 = 8
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  16)     NJ_U64 = 8
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  17)     NJ_I32 = 4
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  18)     NJ_U32 = 4
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  19)     NJ_I16 = 2
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  20)     NJ_U16 = 2
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  21)     NJ_I8 = 1
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  22)     NJ_U8 = 1
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  23)     NJ_CHAR = 1
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  24)     NJ_DOUBLE = 8
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  25)     NJ_FLOAT = 4
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  26)     NJ_TIMESTAMP = 8
c97753da (Jackson Mowry 2024-10-02 07:56:14 -0400  27)     NJ_BOOLEAN = 1
^3fde038 (Jackson Mowry 2024-09-17 08:21:03 -0400  28)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  29) primitive_mapping = {
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  30)     "string": Primitive.NJ_STRING,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  31)     "i64": Primitive.NJ_I64,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  32)     "u64": Primitive.NJ_U64,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  33)     "i32": Primitive.NJ_I32,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  34)     "u32": Primitive.NJ_U32,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  35)     "i16": Primitive.NJ_I16,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  36)     "u16": Primitive.NJ_U16,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  37)     "i8 ": Primitive.NJ_I8 ,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  38)     "u8 ": Primitive.NJ_U8 ,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  39)     "char": Primitive.NJ_CHAR,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  40)     "double": Primitive.NJ_DOUBLE,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  41)     "float": Primitive.NJ_FLOAT,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  42)     "timestamp": Primitive.NJ_TIMESTAMP,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  43)     "boolean": Primitive.NJ_BOOLEAN,
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  44) }
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  45)
f986ad50 (Jackson Mowry 2024-10-02 20:41:07 -0400  46) @dataclass
f986ad50 (Jackson Mowry 2024-10-02 20:41:07 -0400  47) class Metadata:
f986ad50 (Jackson Mowry 2024-10-02 20:41:07 -0400  48)     message_identifier: int
f986ad50 (Jackson Mowry 2024-10-02 20:41:07 -0400  49)     version_number: int
f986ad50 (Jackson Mowry 2024-10-02 20:41:07 -0400  50)     optionals_bitfield: List[bool]
f986ad50 (Jackson Mowry 2024-10-02 20:41:07 -0400  51)
5141aba2 (Jackson Mowry 2024-09-26 08:13:56 -0400  52) @dataclass
5141aba2 (Jackson Mowry 2024-09-26 08:13:56 -0400  53) class Field:
5141aba2 (Jackson Mowry 2024-09-26 08:13:56 -0400  54)     required: bool
5141aba2 (Jackson Mowry 2024-09-26 08:13:56 -0400  55)     default_val: str
5141aba2 (Jackson Mowry 2024-09-26 08:13:56 -0400  56)     type_field: str
5141aba2 (Jackson Mowry 2024-09-26 08:13:56 -0400  57)     name: str
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  58)     array: bool = False
^3fde038 (Jackson Mowry 2024-09-17 08:21:03 -0400  59)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  74) def extract_messages(parsed_xml) -> List[Message]:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  93)                 if '[]' in field_object.type_field:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  94)                     field_object.type_field = field_object.type_field[:-2]
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400  95)                     field_object.array = True
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  96)                 field_names.append(field_object)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 107)             if '[]' in field_object.type_field:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 108)                 field_object.type_field = field_object.type_field[:-2]
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 109)                 field_object.array = True
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 110)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 118) def extract_procedures(parsed_xml: Any) -> List[Procedure]:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 183) @dataclass
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 184) class GraphNode:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 185)     name: str
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 186)     type_name: str
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 187)     edges: List[int] = field(default_factory=list)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 188)     in_degree: int = 0
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 189)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 190) def has_circular_deps(messages: List[Message]):
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 191)     # A basic circular dependency detection algorithm using Kahns Algorithm for Topological Sorting
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 192)     nodes: List[GraphNode] = []
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 193)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 194)     for message in messages:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 195)         temp_node: GraphNode = GraphNode(name = message.name, type_name = message.name)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 196)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 197)         for field in message.fields:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 198)             found: bool = False
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 199)             if field.type_field in primitive_mapping:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 200)                 continue
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 201)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 202)             for index, user_defined in enumerate(messages):
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 203)                 if user_defined.name == field.type_field:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 204)                     if user_defined.name == message.name:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 205)                         print(f"Attempting to include a message ({message.name}) within itself!")
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 206)                         exit()
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 207)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 208)                     temp_node.edges.append(index)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 209)                     found = True
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 210)                     break
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 211)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 212)             if not found:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 213)                 print('Error while resolving dependencies of ' + message.name + ', cannot find type definition for field of type ' + field.type_field)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 214)                 exit()
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 215)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 216)         nodes.append(temp_node)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 217)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 218)     for i in range(len(messages)):
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 219)         for j in range(len(nodes[i].edges)):
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 220)             nodes[nodes[i].edges[j]].in_degree += 1
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 221)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 222)     visited: int = 0
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 223)     q: queue.Queue = queue.Queue()
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 224)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 225)     for node in nodes:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 226)         if node.in_degree == 0:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 227)             q.put(node)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 228)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 229)     while q.qsize() > 0:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 230)         e = q.get()
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 231)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 232)         visited += 1
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 233)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 234)         for i in range(len(e.edges)):
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 235)             nodes[e.edges[i]].in_degree -= 1
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 236)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 237)             if nodes[e.edges[i]].in_degree == 0:
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 238)                 q.put(nodes[e.edges[i]])
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 239)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 240)     if visited == len(messages):
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 241)         return False
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 242)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 243)     circular_deps = [n.name for n in nodes if n.in_degree != 0]
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 244)     print("Circular Dependencies: " + " <-> ".join(circular_deps))
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 245)     return True
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 246)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 247) def read_file(filename: str):
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 248)     with open(filename, 'r') as file:
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 249)         content: str = file.read()
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 250)     return content
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 251)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 252) def write_file(filename: str, contents: str):
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 253)     with open(filename, 'w') as file:
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 254)         file.write(contents)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 255)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 256) def main(schemafile: str, template_file: str, output_file: str):
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 257)     #parsing the xml content
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 258)     content: str = read_file(schemafile)
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 260)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 261)     environment = Environment(loader=FileSystemLoader("."))
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 262)     environment.trim_blocks = True
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 263)     environment.lstrip_blocks = True
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 264)     environment.keep_trailing_newline = True
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 265)
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 269)     if has_circular_deps(message_data):
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 270)         print('Your schemafile contains circular dependencies!')
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 271)         exit()
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 272)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 273)     template = environment.get_template(template_file)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 274)     context = {
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 275)         "messages": message_data
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 276)     }
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 277)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 278)     output: str = template.render(context)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 279)     write_file(output_file, output)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 281) if __name__ == '__main__':
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 282)     parser: argparse.ArgumentParser = argparse.ArgumentParser(
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 283)         prog='notJSON',
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 284)         description='A CLI Tool to generate clients/servers for notJSON schemas',
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 285)     )
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 286)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 287)     parser.add_argument('schemafile', help='Your input schemafile, should end in `.schemafile`')
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 288)     parser.add_argument('template', help='Your output Jinja Template, should end in `.jinja`')
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 289)     parser.add_argument('outputfile', help='The destination file notJSON should write to, file extension should match generated source file')
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 290)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 291)     args = parser.parse_args()
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 293)     main(args.schemafile, args.template, args.outputfile)

`templates/c_server.jinja`
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  1) #include <stdint.h>
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  2) #include <stdbool.h>
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  3) #include <time.h>
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  4)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  5) typedef char* string;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  6) typedef int64_t i64;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  7) typedef uint64_t u64;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  8) typedef int32_t i32;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400  9) typedef uint32_t u32;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 10) typedef int16_t i16;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 11) typedef uint16_t u16;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 12) typedef int8_t i8;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 13) typedef uint8_t u8;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 14) typedef time_t timestamp;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 15) typedef bool boolean;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 16)
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 17) {% for message in messages -%}
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 18)   typedef struct {{ message.name }} {
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 19)   {% for field in message.fields %}
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 20)     {% if field.array %}
e37cd294 (Jackson Mowry 2024-10-02 20:26:54 -0400 21)       {{ field.type_field }}* {{ field.name }};
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 22)       size_t {{ field.name}}_count;
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 23)     {% else %}
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 24)       {{ field.type_field }} {{ field.name }};
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 25)     {% endif %}
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 26)   {% endfor %}
cc06566a (Jackson Mowry 2024-10-02 18:15:45 -0400 27) } {{message.name}};
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 28)
b2c95094 (Jackson Mowry 2024-09-21 06:12:42 -0400 29) {% endfor %}

`clients/javascript/index.html`
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  1) <!doctype html>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  2) <html lang="en">
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  3)   <head>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  4)     <meta charset="UTF-8" />
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  5)     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  6)     <title>Byte Array Sender</title>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  7)   </head>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  8)   <body>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  9)     <h1>Send Input as Byte Array</h1>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 10)     <input type="text" id="userInput" placeholder="Enter something" />
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 11)     <button id="sendButton">Send</button>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 12)     <div id="response" style="margin-top: 20px"></div>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 13) 
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 14)     <script>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 15)       document.getElementById("sendButton").onclick = function () {
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 16)         const input = document.getElementById("userInput").value;
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 17)         const byteArray = new TextEncoder().encode(input);
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 18) 
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 19)         fetch("http://localhost:1234", {
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 20)           method: "POST",
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 21)           body: byteArray,
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 22)           headers: {
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 23)             "Content-Type": "application/octet-stream",
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 24)           },
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 25)         })
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 26)           .then((response) => response.text())
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 27)           .then((data) => {
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 28)             document.getElementById("response").innerText = `Response: ${data}`;
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 29)           })
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 30)           .catch((error) => {
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 31)             document.getElementById("response").innerText = `Error: ${error}`;
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 32)           });
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 33)       };
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 34)     </script>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 35)   </body>
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 36) </html>

`clients/javascript/echo_server.sh`
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  1) #!/bin/bash
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  2) 
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  3) # Define the port on which the server will listen
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  4) PORT=1234
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  5) 
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  6) echo "Bash Echo Server is running and listening on port $PORT..."
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  7) 
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  8) # Start the server and listen for incoming connections
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400  9) while true; do
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 10)   {
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 11)     # Read the incoming request
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 12)     read request
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 13) 
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 14)     # Send the HTTP response with CORS headers
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 15)     echo -ne "HTTP/1.1 200 OK\r\n"
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 16)     echo -ne "Access-Control-Allow-Origin: *\r\n"  # Allow all origins
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 17)     echo -ne "Access-Control-Allow-Methods: POST, GET, OPTIONS\r\n"
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 18)     echo -ne "Access-Control-Allow-Headers: Content-Type\r\n"
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 19)     echo -ne "\r\n"  # End of headers
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 20) 
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 21)     # Echo the request back (or process as needed)
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 22)     echo -ne "$request\r\n"
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 23)   } | netcat -l -p $PORT
81e52202 (Jackson Mowry 2024-10-02 20:51:37 -0400 24) done

`schema_definition.xsd`
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  1) <?xml version="1.0" encoding="UTF-8"?>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  2) <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  3) 
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  4)     <xs:element name="schema">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  5)         <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  6)             <xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  7)                 <xs:element name="messages">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  8)                     <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400  9)                         <xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 10)                             <xs:element name="message" maxOccurs="unbounded">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 11)                                 <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 12)                                     <xs:sequence>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 13)                                         <xs:element name="fields">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 14)                                             <xs:complexType>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 15)                                                 <xs:sequence>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 16)                                                     <xs:element name="field" maxOccurs="unbounded">
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 17)                                                         <xs:complexType>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 18)                                                             <xs:simpleContent>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 19)                                                                 <xs:extension base="xs:string">
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 20)                                                                     <xs:attribute name="type" type="xs:string" use="required"/>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 21)                                                                     <xs:attribute name="required" type="xs:boolean" use="optional"/>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 22)                                                                     <xs:attribute name="default" type="xs:string" use="optional"/>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 23)                                                                 </xs:extension>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 24)                                                             </xs:simpleContent>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 25)                                                         </xs:complexType>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 26)                                                     </xs:element>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 27)                                                 </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 28)                                             </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 29)                                         </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 30)                                     </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 31)                                     <xs:attribute name="name" type="xs:string" use="required"/>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 32)                                 </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 33)                             </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 34)                         </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 35)                     </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 36)                 </xs:element>
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 37) 
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 38)                 <xs:element name="procedures">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 39)                     <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 40)                         <xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 41)                             <xs:element name="procedure" maxOccurs="unbounded">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 42)                                 <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 43)                                     <xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 44)                                         <xs:element name="description" type="xs:string"/>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 45)                                         <xs:element name="parameters">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 46)                                             <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 47)                                                 <xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 48)                                                     <xs:element name="field" maxOccurs="unbounded">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 49)                                                         <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 50)                                                             <xs:simpleContent>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 51)                                                                 <xs:extension base="xs:string">
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 52)                                                                     <xs:attribute name="type" type="xs:string" use="required"/>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 53)                                                                     <xs:attribute name="required" type="xs:boolean" use="optional"/>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 54)                                                                 </xs:extension>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 55)                                                             </xs:simpleContent>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 56)                                                         </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 57)                                                     </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 58)                                                 </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 59)                                             </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 60)                                         </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 61)                                         <xs:element name="returns">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 62)                                             <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 63)                                                 <xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 64)                                                     <xs:element name="field" maxOccurs="unbounded">
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 65)                                                         <xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 66)                                                             <xs:simpleContent>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 67)                                                                 <xs:extension base="xs:string">
e804e2a7 (Jackson Mowry 2024-09-21 05:44:59 -0400 68)                                                                     <xs:attribute name="type" type="xs:string" use="required"/>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 69)                                                                 </xs:extension>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 70)                                                             </xs:simpleContent>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 71)                                                         </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 72)                                                     </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 73)                                                 </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 74)                                             </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 75)                                         </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 76)                                     </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 77)                                     <xs:attribute name="name" type="xs:string" use="required"/>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 78)                                 </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 79)                             </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 80)                         </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 81)                     </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 82)                 </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 83)             </xs:sequence>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 84)             <xs:attribute name="version" type="xs:string" use="required"/>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 85)         </xs:complexType>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 86)     </xs:element>
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 87) 
58c1406e (Jackson Mowry 2024-09-21 05:12:25 -0400 88) </xs:schema>
