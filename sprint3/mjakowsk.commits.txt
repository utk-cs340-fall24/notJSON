examples/example_client.py

1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  17) import pprint
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400  18) import socket
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  60)         'char' : 'B',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  90) def operation_msg_pack(operation_msg_var):
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  91)     format_string_mapping = {
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  92)         'string' : 'q',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  93)         'char' : 'B',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  94)         'i64' : 'q',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  95)         'ui64' : 'Q',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  96)         'i32' : 'i',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  97)         'ui32' : 'I',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  98)         'i16' : 'h',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400  99)         'ui6' : 'H',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 100)         'i8' : 'b',
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 101)         'u8' : 'B'
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 102)     }
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 103) 
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 104)     format_string = '<'
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 105)     format_string += (format_string_mapping['i32'])
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 106)     format_string += (format_string_mapping['i32'])
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 107)     format_string += (format_string_mapping['char'])
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 108) 
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 109)     bin_string = struct.pack(format_string, getattr(operation_msg_var, 'operand_one'),
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 110)                              getattr(operation_msg_var, 'operand_two'),
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 111)                              getattr(operation_msg_var, 'operation'),
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 112)                              )
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 113) 
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 114)     return bin_string
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 127)     binary_string = struct.pack('<iic', 1, 1023, bytes('a', 'utf-8'))
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 128)     msg = operation_msg_unpack(binary_string)
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 130)     #prompt users to populate example instance of class
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 131)     variables = (vars(operation_msg)['__annotations__'])
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 132)     var_names = list(variables.keys())  
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 133)     var_types = list(variables.values())  
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 135)     ex_operation_msg_input_list = []
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 137)     for index, name in enumerate(var_names):
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 138)         ex_operation_msg_input_list.append(
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 139)              int(input("Enter value for " + name + ': ')) )
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 141)     ex_operation_msg = operation_msg(
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 142)         ex_operation_msg_input_list[0],
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 143)         ex_operation_msg_input_list[1],
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 144)         ex_operation_msg_input_list[2],
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 145)     )
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 147)     bin_string = operation_msg_pack(ex_operation_msg)
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 148) 
18df7f88 (Mikolaj Jakowski 2024-10-31 00:42:02 -0400 149)     print(f'binary string: {bin_string}')
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 150) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 151)     s = socket.socket()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 152) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 153)     # Define the port on which you want to connect
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 154)     port = 60221 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 155) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 156)     # connect to the server on local computer
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 157)     s.connect(('127.0.0.1', port))
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 158) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 159)     # send the binary string that represents the packaged message
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 160)     s.send(bin_string)
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 161)     # close the connection
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 162)     s.close()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 163) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 164)     
1e030abe (Mikolaj Jakowski 2024-10-31 00:19:50 -0400 165)     



templates/python_client.py 

9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400   6) import socket
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  83) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  84) def {{ message.name }}_pack({{ message.name }}_var):
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  85)   format_string_mapping = {
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  86)       'string' : 'q',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  87)       'char' : 'B',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  88)       'i64' : 'q',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  89)       'ui64' : 'Q',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  90)       'i32' : 'i',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  91)       'ui32' : 'I',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  92)       'i16' : 'h',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  93)       'ui6' : 'H',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  94)       'i8' : 'b',
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  95)       'u8' : 'B'
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  96)   }
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  97) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  98)   format_string = '<'
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400  99)   {% for field in message.fields %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 100)   {% if field.array %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 101)   {{field.name}} : list[{{ field.type_field}}] 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 102)   {% else %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 103)   {% if field.name != "padding" %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 104)   format_string += format_string_mapping['{{ field.type_field}}']
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 105)   {% endif %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 106)   {% endif %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 107)   {% endfor %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 108) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 109)   bin_string = struct.pack(format_string,
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 110)                             {% for field in message.fields %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 111)                             {% if field.name != "padding" %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 112)                             getattr({{ message.name }}_var, '{{field.name}}'),
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 113)                             {% endif %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 114)                             {% endfor %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 115)                             )
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 116) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 117)   return bin_string
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 118) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 130)     {% for message in messages -%}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 131)     #prompt users to populate example instance of {{ message.name }} class
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 132)     variables = (vars(operation_msg)['__annotations__'])
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 133)     var_names = list(variables.keys())  
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 134)     var_types = list(variables.values())  
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 136)     ex_{{message.name}}_input_list = []
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 138)     for index, name in enumerate(var_names):
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 139)         ex_{{message.name}}_input_list.append(
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 140)              int(input("Enter value for " + name + ': ')) )
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 141) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 142)     ex_{{message.name}} = {{message.name}}(
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 143)       {% for field in message.fields %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 144)       {% if field.array %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 145)       {{field.name}} : list[{{ field.type_field}}] 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 146)       {% else %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 147)       {% if field.name != "padding" %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 148)       ex_{{message.name}}_input_list[{{loop.index0}}],
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 149)       {% endif %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 150)       {% endif %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 151)       {% endfor %}
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 152)     )
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 153) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 154)     bin_string = operation_msg_pack(ex_operation_msg)
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 155) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 156)     print(f'binary string: {bin_string}')
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 157) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 158)     s = socket.socket()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 159) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 160)     # Define the port on which you want to connect
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 161)     port = 60221 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 162) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 163)     # connect to the server on local computer
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 164)     s.connect(('127.0.0.1', port))
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 165) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 166)     # send the binary string that represents the packaged message
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 167)     s.send(bin_string)
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 168)     # close the connection
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 169)     s.close()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 170) 
48a5168d (Mikolaj Jakowski 2024-10-31 01:04:42 -0400 171)     {% endfor %}


examples/example_server.py


b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400  1) # The purpose of this file is to create a python server
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400  2) # that will be able to receive an example binary message
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400  3) # sent from the python clinet and then do something with
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400  4) # that message to show that it is working
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400  5) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400  6) 
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400  7) # Socket is used for networking
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400  8) import socket
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400  9) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 10) def main(): 
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400 11)     #create a socket
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 12)     s = socket.socket()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 13)     print("Socket succesfully created")
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 14) 
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400 15)     #select a random port
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 16)     port = 60221
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 17) 
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400 18)     # take any incoming connections from the localhost
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400 19)     # in this demo we are only looking at connection between 
b56be1bd (Mikolaj Jakowski 2024-10-31 22:39:25 -0400 20)     # local process
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 21)     s.bind(('localhost', port))
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 22)     s.listen(5)
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 23) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 24)     while True:
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 25)         # Establish connection with client.
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 26)         c, addr = s.accept()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 27)         print ('Got connection from', addr )
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 28) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 29)         # receive message from client
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 30)         bin_string = c.recv(1024)
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 31) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 32)         print(bin_string)
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 33) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 34)         # Close the connection with the client
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 35)         c.close()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 36) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 37) 
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 38) if __name__ == '__main__':
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 39)     main()
9c0d90c0 (Mikolaj Jakowski 2024-10-31 01:47:39 -0400 40)     