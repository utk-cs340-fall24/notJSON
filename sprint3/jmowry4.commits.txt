c_client.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdint.h>
c_client.jinja (jackson mowry on 10/17/2024 at 18:56): #include <string.h>
c_client.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdbool.h>
c_client.jinja (jackson mowry on 10/17/2024 at 18:56): #include <time.h>
c_client.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdlib.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <stdio.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <unistd.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <stdio.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <stdlib.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <string.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <stdint.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <unistd.h>
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #include <arpa/inet.h>
c_client.jinja (jackson mowry on 10/17/2024 at 18:56): #include "{{ output_file.split('/')[1].split('.')[0] }}.h"
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #define SERVER_IP "127.0.0.1" // Localhost
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #define SERVER_PORT 8080       // Port number to connect to
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): #define BUFFER_SIZE 256        // Size of send and receive buffers
c_client.jinja (jackson mowry on 10/17/2024 at 18:56): {% for message in messages -%}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   size_t {{ message.name }}_pack(const {{ message.name }}* struct_{{ message.name }}, u8** out) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   size_t metadata_size = sizeof(u8) * 3 + (({{ message.metadata.optionals_count }} + 7) / 8) * sizeof(u8);
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   ssize_t optional_index = 0;
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% set has_array_fields = namespace(value=False) %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if field.array %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% set has_array_fields.value = True %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% if has_array_fields.value %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     size_t variable_space = 0;
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if field.array %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if not field.required %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         if (struct_{{ message.name }}->{{ field.name }}_present) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if field != message.fields[0] and primitive_mapping[field.type_field].value != 1 %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         variable_space += sizeof({{ field.type_field }}) - (variable_space % sizeof({{ field.type_field }}));
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       variable_space += struct_{{ message.name }}->{{ field.name }}_count * sizeof({{ field.type_field }});
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if not field.required %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   if (!*out) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% if has_array_fields.value %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     *out = calloc(1, {{ message.name.upper() }}_PACKED_SIZE + metadata_size + variable_space);
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% else %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     *out = calloc(1, {{ message.name.upper() }}_PACKED_SIZE + metadata_size);
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% if has_array_fields.value %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   variable_space = {{ message.name.upper() }}_PACKED_SIZE + metadata_size;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endif %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   u8* optional = *out + 3;
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   (*out)[0] = {{ message.metadata.message_identifier }};
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   (*out)[1] = {{ message.metadata.version_number }};
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% set current_offset = namespace(value=0) %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if not field.padding %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       // {{ field.name }}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if not field.required %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         if (struct_{{ message.name }}->{{ field.name }}_present) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         optional[optional_index / 8] |= (1 << optional_index % 8);
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if field.array %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {% if primitive_mapping[field.type_field].value != 1 %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):           variable_space += sizeof({{ field.type_field }}) - (variable_space % sizeof({{ field.type_field }}));
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         memcpy(*out + variable_space, struct_{{ message.name }}->{{ field.name }}, struct_{{ message.name }}->{{ field.name }}_count * sizeof(*struct_{{ message.name }}->{{ field.name }}));
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         *(u32*)(*out + {{ current_offset.value }} + metadata_size) = variable_space;
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         *(u32*)(*out + {{ current_offset.value }} + 4 + metadata_size) = struct_{{ message.name }}->{{ field.name }}_count;
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         variable_space += struct_{{ message.name }}->{{ field.name }}_count * sizeof(*struct_{{ message.name }}->{{ field.name }});
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% else %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         memcpy(*out + {{ current_offset.value }} + metadata_size, &struct_{{ message.name }}->{{ field.name }}, {{ field.size }});
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if not field.required %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         } else {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         optional[optional_index / 8] &= ~(1 << optional_index % 8);
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         ++optional_index;
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% set current_offset.value = current_offset.value + field.size %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% if has_array_fields.value %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     return variable_space;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% else %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     return {{ message.name.upper() }}_PACKED_SIZE + metadata_size;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% set current_offset.value = 0 %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% set current_optional = namespace(value = 0) %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% set metadata_offset = 3 +(message.metadata.optionals_count + 7) // 8 %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if not field.padding %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if field.array %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {{ field.type_field }}* get_{{message.name}}_{{ field.name }}(const u8* message) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         return ({{ field.type_field }}*)(message + *(u32*)(message + {{ current_offset.value }} + {{ metadata_offset }}));
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         u32 get_{{message.name}}_{{field.name}}_length(const u8* message) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         return *(u32*)(message + {{ current_offset.value }} + 4 + {{ metadata_offset }});
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% else %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {{ field.type_field }} get_{{message.name}}_{{ field.name }}(const u8* message) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         return *({{field.type_field}}*)(message + {{ current_offset.value }} + {{ metadata_offset }});
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if not field.required %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         bool get_{{ message.name }}_{{ field.name }}_present(const u8* message) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         return ((message + 2)[{{ current_optional.value }} / 8] >> ({{ current_optional.value }} % 8)) & 0x1;
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {% set current_optional.value = current_optional.value + 1 %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% set current_offset.value = current_offset.value + field.size %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {{ message.name }} {{ message.name }}_unpack(const u8* message) {
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   return ({{ message.name }}){
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if not field.padding %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if field.required %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         .{{ field.name }} = get_{{ message.name }}_{{ field.name }}(message),
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {% if field.array %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):           .{{ field.name }}_count = get_{{ message.name }}_{{field.name}}_length(message),
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% else %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         .{{ field.name }} = get_{{message.name}}_{{field.name}}_present(message) ? get_{{ message.name }}_{{ field.name }}(message) : 0,
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {% if field.array %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):           .{{ field.name }}_count = get_{{message.name}}_{{field.name}}_present(message) ? get_{{ message.name }}_{{field.name}}_length(message) : 0,
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):         .{{ field.name }}_present = get_{{message.name}}_{{field.name}}_present(message),
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   };
c_client.jinja (jackson mowry on 10/17/2024 at 18:56):   }
c_client.jinja (jackson mowry on 10/17/2024 at 18:56): {% endfor %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): {% for procedure in procedures %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   /* {{ procedure.description }} */
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {{ procedure.return_values[0].type_field }} {{ procedure.name }}(
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% for param in procedure.parameters %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     {% if param != procedure.parameters[-1] %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):       {{ param.type_field }} {{ param.name }},
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     {% else %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):       {{ param.type_field }} {{ param.name }}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     {% endif %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endfor %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   ) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     int sock;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     struct sockaddr_in server_addr;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     uint8_t* send_buffer = NULL;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     size_t send_buffer_size;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     uint8_t recv_buffer[BUFFER_SIZE];
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     ssize_t bytes_sent, bytes_received;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     send_buffer_size = {{ procedure.parameters[0].type_field }}_pack(&{{ procedure.parameters[0].name }}, &send_buffer);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   send_buffer[2] = {{ loop.index0 }};
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Step 1: Create a socket
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     sock = socket(AF_INET, SOCK_STREAM, 0);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     if (sock < 0) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         perror("Socket creation failed"); // Print error message
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         exit(1);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("Socket created successfully.\n");
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Step 2: Prepare the server address structure
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     memset(&server_addr, 0, sizeof(server_addr)); // Clear the structure
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     server_addr.sin_family = AF_INET; // IPv4
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     server_addr.sin_port = htons(SERVER_PORT); // Convert port to network byte order
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Convert IPv4 address from text to binary form
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         perror("Invalid address / Address not supported");
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         close(sock); // Close the socket before exiting
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         exit(1);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("Server address set to %s:%d.\n", SERVER_IP, SERVER_PORT);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Step 3: Connect to the server
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         perror("Connection failed"); // Print error message
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         close(sock); // Close the socket
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         exit(1);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("Connected to the server at %s:%d.\n", SERVER_IP, SERVER_PORT);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Step 4: Send data to the server
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("Sending data: ");
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     for (size_t i = 0; i < send_buffer_size; i++) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         printf("%02x ", send_buffer[i]); // Print data being sent
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("\n");
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     bytes_sent = send(sock, send_buffer, sizeof(send_buffer), 0);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     if (bytes_sent < 0) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         perror("Send failed"); // Print error message
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         close(sock); // Close the socket
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         exit(1);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("Sent %zd bytes to the server.\n", bytes_sent);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Step 5: Receive response from the server
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     bytes_received = recv(sock, recv_buffer, sizeof(recv_buffer), 0);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     if (bytes_received < 0) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         perror("Receive failed"); // Print error message
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         close(sock); // Close the socket
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         exit(1);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Step 6: Print the received data
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("Received %zd bytes from the server: ", bytes_received);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     for (ssize_t i = 0; i < bytes_received; i++) {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):         printf("%02x ", recv_buffer[i]); // Print each byte of received data
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("\n");
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     // Step 7: Close the socket
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     close(sock);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     printf("Socket closed. Exiting program.\n");
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     {{ procedure.return_values[0].type_field }} ret_val = {{ procedure.return_values[0].type_field }}_unpack(recv_buffer);
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     return ret_val;
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): {% endfor %}
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): int main() {
c_client.jinja (jackson mowry on 10/30/2024 at 17:47):     return 0; // Exit successfully
c_client.jinja (jackson mowry on 10/30/2024 at 17:47): }
optional.schemafile (jackson mowry on 10/17/2024 at 18:56):         <field type="i32" required="false">num</field>
script.py    (jackson mowry on 10/17/2024 at 18:56):     if not isinstance(procedures, list):
script.py    (jackson mowry on 10/17/2024 at 18:56):         procedures = [procedures]
script.py    (jackson mowry on 10/17/2024 at 18:56):         "primitive_mapping": primitive_mapping,
script.py    (jackson mowry on 10/17/2024 at 18:56):         "output_file": output_file,
script.py    (jackson mowry on 10/17/2024 at 18:56):         "procedures": procedure_data
server.c     (jackson mowry on 10/17/2024 at 18:56): #include "optional.h"
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <fcntl.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <stdint.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <stdio.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <stdlib.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <string.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <sys/stat.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <sys/types.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #include <unistd.h>
server.c     (jackson mowry on 10/17/2024 at 18:56): #define FIFO_PATH "myfifo"
server.c     (jackson mowry on 10/17/2024 at 18:56): #define BUFFER_SIZE 1024
server.c     (jackson mowry on 10/17/2024 at 18:56): int main() {
server.c     (jackson mowry on 10/17/2024 at 18:56):   uint8_t *buffer = NULL;
server.c     (jackson mowry on 10/17/2024 at 18:56):   char *greeting = NULL;
server.c     (jackson mowry on 10/17/2024 at 18:56):   char *name = NULL;
server.c     (jackson mowry on 10/17/2024 at 18:56):   int num;
server.c     (jackson mowry on 10/17/2024 at 18:56):   size_t size;
server.c     (jackson mowry on 10/17/2024 at 18:56):   char *buf;
server.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Please input your message: ");
server.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Greeting (optional): ");
server.c     (jackson mowry on 10/17/2024 at 18:56):   getline(&buf, &size, stdin);
server.c     (jackson mowry on 10/17/2024 at 18:56):   buf[strlen(buf) - 1] = 0;
server.c     (jackson mowry on 10/17/2024 at 18:56):   greeting = malloc(strlen(buf) + 1);
server.c     (jackson mowry on 10/17/2024 at 18:56):   strcpy(greeting, buf);
server.c     (jackson mowry on 10/17/2024 at 18:56):   greeting[strcspn(greeting, "\n")] = '\0';
server.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Name: ");
server.c     (jackson mowry on 10/17/2024 at 18:56):   getline(&buf, &size, stdin);
server.c     (jackson mowry on 10/17/2024 at 18:56):   name = malloc(strlen(buf) + 1);
server.c     (jackson mowry on 10/17/2024 at 18:56):   strcpy(name, buf);
server.c     (jackson mowry on 10/17/2024 at 18:56):   name[strcspn(name, "\n")] = '\0';
server.c     (jackson mowry on 10/17/2024 at 18:56):   operation_msg om = {.greeting = greeting,
server.c     (jackson mowry on 10/17/2024 at 18:56):                       .greeting_count = strlen(greeting),
server.c     (jackson mowry on 10/17/2024 at 18:56):                       .greeting_present = true,
server.c     (jackson mowry on 10/17/2024 at 18:56):                       .num_present = false,
server.c     (jackson mowry on 10/17/2024 at 18:56):                       .name = name,
server.c     (jackson mowry on 10/17/2024 at 18:56):                       .name_count = strlen(name) + 1};
server.c     (jackson mowry on 10/17/2024 at 18:56):   size_t bytes = operation_msg_pack(&om, &buffer);
server.c     (jackson mowry on 10/17/2024 at 18:56):   uint8_t response[BUFFER_SIZE];
server.c     (jackson mowry on 10/17/2024 at 18:56):   // Create the named pipe
server.c     (jackson mowry on 10/17/2024 at 18:56):   mkfifo(FIFO_PATH, 0666);
server.c     (jackson mowry on 10/17/2024 at 18:56):   // Open the FIFO for writing
server.c     (jackson mowry on 10/17/2024 at 18:56):   int fd = open(FIFO_PATH, O_WRONLY);
server.c     (jackson mowry on 10/17/2024 at 18:56):   if (fd == -1) {
server.c     (jackson mowry on 10/17/2024 at 18:56):     perror("Failed to open FIFO for writing");
server.c     (jackson mowry on 10/17/2024 at 18:56):     exit(EXIT_FAILURE);
server.c     (jackson mowry on 10/17/2024 at 18:56):   }
server.c     (jackson mowry on 10/17/2024 at 18:56):   // Send data to the reader
server.c     (jackson mowry on 10/17/2024 at 18:56):   write(fd, buffer, bytes);
server.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Writer: Sent data\n");
server.c     (jackson mowry on 10/17/2024 at 18:56):   // Close the writing end
server.c     (jackson mowry on 10/17/2024 at 18:56):   close(fd);
server.c     (jackson mowry on 10/17/2024 at 18:56):   // Open the FIFO for reading (blocking)
server.c     (jackson mowry on 10/17/2024 at 18:56):   fd = open(FIFO_PATH, O_RDONLY);
server.c     (jackson mowry on 10/17/2024 at 18:56):   if (fd == -1) {
server.c     (jackson mowry on 10/17/2024 at 18:56):     perror("Failed to open FIFO for reading");
server.c     (jackson mowry on 10/17/2024 at 18:56):     exit(EXIT_FAILURE);
server.c     (jackson mowry on 10/17/2024 at 18:56):   }
server.c     (jackson mowry on 10/17/2024 at 18:56):   // Receive response from the reader
server.c     (jackson mowry on 10/17/2024 at 18:56):   read(fd, response, BUFFER_SIZE);
server.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Writer: Received response: ");
server.c     (jackson mowry on 10/17/2024 at 18:56):   operation_msg recv = operation_msg_unpack(response);
server.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Client sent: %s %s %d\n", recv.greeting, recv.name, recv.num);
server.c     (jackson mowry on 10/17/2024 at 18:56):   // Close the reading end
server.c     (jackson mowry on 10/17/2024 at 18:56):   close(fd);
server.c     (jackson mowry on 10/17/2024 at 18:56):   unlink(FIFO_PATH); // Clean up the FIFO
server.c     (jackson mowry on 10/17/2024 at 18:56):   free(buffer);
server.c     (jackson mowry on 10/17/2024 at 18:56):   free(greeting);
server.c     (jackson mowry on 10/17/2024 at 18:56):   free(name);
server.c     (jackson mowry on 10/17/2024 at 18:56):   free(buf);
server.c     (jackson mowry on 10/17/2024 at 18:56):   return 0;
server.c     (jackson mowry on 10/17/2024 at 18:56): }
embedded.h   (jackson mowry on 10/30/2024 at 17:47): #include <stdint.h>
embedded.h   (jackson mowry on 10/30/2024 at 17:47): #include <string.h>
embedded.h   (jackson mowry on 10/30/2024 at 17:47): #include <stdbool.h>
embedded.h   (jackson mowry on 10/30/2024 at 17:47): #include <time.h>
embedded.h   (jackson mowry on 10/30/2024 at 17:47): #include <stdlib.h>
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef char* string;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef int64_t i64;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef uint64_t u64;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef int32_t i32;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef uint32_t u32;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef int16_t i16;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef uint16_t u16;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef int8_t i8;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef uint8_t u8;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef time_t timestamp;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): typedef bool boolean;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): #define OPERATION_PACKED_SIZE 8
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   typedef struct operation {
embedded.h   (jackson mowry on 10/30/2024 at 17:47):       i32 operand_one;
embedded.h   (jackson mowry on 10/30/2024 at 17:47):       i32 operand_two;
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   } operation;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): #define RESULT_PACKED_SIZE 4
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   typedef struct result {
embedded.h   (jackson mowry on 10/30/2024 at 17:47):       i32 res;
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   } result;
embedded.h   (jackson mowry on 10/30/2024 at 17:47): size_t operation_pack(const operation* struct_operation, u8** out);
embedded.h   (jackson mowry on 10/30/2024 at 17:47):         i32 get_operation_operand_one(const u8* message);
embedded.h   (jackson mowry on 10/30/2024 at 17:47):         i32 get_operation_operand_two(const u8* message);
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   operation operation_unpack(const u8* message);
embedded.h   (jackson mowry on 10/30/2024 at 17:47): size_t result_pack(const result* struct_result, u8** out);
embedded.h   (jackson mowry on 10/30/2024 at 17:47):         i32 get_result_res(const u8* message);
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   result result_unpack(const u8* message);
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   /* 
embedded.h   (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
embedded.h   (jackson mowry on 10/30/2024 at 17:47):        */
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   size_t addition(
embedded.h   (jackson mowry on 10/30/2024 at 17:47):     operation ops,
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   u8 **out
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   );
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   /* 
embedded.h   (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
embedded.h   (jackson mowry on 10/30/2024 at 17:47):        */
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   size_t subtraction(
embedded.h   (jackson mowry on 10/30/2024 at 17:47):     operation ops,
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   u8 **out
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   );
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   /* 
embedded.h   (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
embedded.h   (jackson mowry on 10/30/2024 at 17:47):        */
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   size_t multiplication(
embedded.h   (jackson mowry on 10/30/2024 at 17:47):     operation ops,
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   u8 **out
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   );
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   /* 
embedded.h   (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
embedded.h   (jackson mowry on 10/30/2024 at 17:47):        */
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   size_t division(
embedded.h   (jackson mowry on 10/30/2024 at 17:47):     operation ops,
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   u8 **out
embedded.h   (jackson mowry on 10/30/2024 at 17:47):   );
optional.c   (jackson mowry on 10/17/2024 at 18:56): #include "optional.h"
optional.c   (jackson mowry on 10/17/2024 at 18:56): #include <stdbool.h>
optional.c   (jackson mowry on 10/17/2024 at 18:56): #include <stdint.h>
optional.c   (jackson mowry on 10/17/2024 at 18:56): #include <stdlib.h>
optional.c   (jackson mowry on 10/17/2024 at 18:56): #include <string.h>
optional.c   (jackson mowry on 10/17/2024 at 18:56): #include <time.h>
optional.c   (jackson mowry on 10/17/2024 at 18:56): size_t operation_msg_pack(const operation_msg *struct_operation_msg, u8 **out) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   size_t metadata_size = sizeof(u8) + sizeof(u8) + ((2 + 7) / 8) * sizeof(u8);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   ssize_t optional_index = 0;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   size_t variable_space = 0;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   variable_space += struct_operation_msg->name_count * sizeof(char);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   if (struct_operation_msg->greeting_present) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):     variable_space += struct_operation_msg->greeting_count * sizeof(char);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   }
optional.c   (jackson mowry on 10/17/2024 at 18:56):   if (*out == NULL) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):     *out =
optional.c   (jackson mowry on 10/17/2024 at 18:56):         calloc(1, OPERATION_MSG_PACKED_SIZE + metadata_size + variable_space);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   }
optional.c   (jackson mowry on 10/17/2024 at 18:56):   variable_space = OPERATION_MSG_PACKED_SIZE + metadata_size;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   u8 *optional = *out + 2;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   (*out)[0] = 0;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   (*out)[1] = 0;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   // name
optional.c   (jackson mowry on 10/17/2024 at 18:56):   memcpy(*out + variable_space, struct_operation_msg->name,
optional.c   (jackson mowry on 10/17/2024 at 18:56):          struct_operation_msg->name_count *
optional.c   (jackson mowry on 10/17/2024 at 18:56):              sizeof(*struct_operation_msg->name));
optional.c   (jackson mowry on 10/17/2024 at 18:56):   *(u32 *)(*out + 0 + metadata_size) = variable_space;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   *(u32 *)(*out + 0 + 4 + metadata_size) = struct_operation_msg->name_count;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   variable_space +=
optional.c   (jackson mowry on 10/17/2024 at 18:56):       struct_operation_msg->name_count * sizeof(*struct_operation_msg->name);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   // greeting
optional.c   (jackson mowry on 10/17/2024 at 18:56):   if (struct_operation_msg->greeting_present) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):     optional[optional_index / 8] |= (1 << optional_index % 8);
optional.c   (jackson mowry on 10/17/2024 at 18:56):     memcpy(*out + variable_space, struct_operation_msg->greeting,
optional.c   (jackson mowry on 10/17/2024 at 18:56):            struct_operation_msg->greeting_count *
optional.c   (jackson mowry on 10/17/2024 at 18:56):                sizeof(*struct_operation_msg->greeting));
optional.c   (jackson mowry on 10/17/2024 at 18:56):     *(u32 *)(*out + 8 + metadata_size) = variable_space;
optional.c   (jackson mowry on 10/17/2024 at 18:56):     *(u32 *)(*out + 8 + 4 + metadata_size) =
optional.c   (jackson mowry on 10/17/2024 at 18:56):         struct_operation_msg->greeting_count;
optional.c   (jackson mowry on 10/17/2024 at 18:56):     variable_space += struct_operation_msg->greeting_count *
optional.c   (jackson mowry on 10/17/2024 at 18:56):                       sizeof(*struct_operation_msg->greeting);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   } else {
optional.c   (jackson mowry on 10/17/2024 at 18:56):     optional[optional_index / 8] &= ~(1 << optional_index % 8);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   }
optional.c   (jackson mowry on 10/17/2024 at 18:56):   ++optional_index;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   // num
optional.c   (jackson mowry on 10/17/2024 at 18:56):   if (struct_operation_msg->num_present) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):     optional[optional_index / 8] |= (1 << optional_index % 8);
optional.c   (jackson mowry on 10/17/2024 at 18:56):     memcpy(*out + 16 + metadata_size, &struct_operation_msg->num, 4);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   } else {
optional.c   (jackson mowry on 10/17/2024 at 18:56):     optional[optional_index / 8] &= ~(1 << optional_index % 8);
optional.c   (jackson mowry on 10/17/2024 at 18:56):   }
optional.c   (jackson mowry on 10/17/2024 at 18:56):   ++optional_index;
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return variable_space;
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): char *get_operation_msg_name(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return (char *)(message + *(u32 *)(message + 0 + 3));
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): u32 get_operation_msg_name_length(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return *(u32 *)(message + 0 + 4 + 3);
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): char *get_operation_msg_greeting(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return (char *)(message + *(u32 *)(message + 8 + 3));
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): u32 get_operation_msg_greeting_length(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return *(u32 *)(message + 8 + 4 + 3);
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): bool get_operation_msg_greeting_present(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return ((message + 2)[0 / 8] >> (0 % 8)) & 0x1;
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): i32 get_operation_msg_num(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return *(i32 *)(message + 16 + 3);
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): bool get_operation_msg_num_present(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return ((message + 2)[1 / 8] >> (1 % 8)) & 0x1;
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
optional.c   (jackson mowry on 10/17/2024 at 18:56): operation_msg operation_msg_unpack(const u8 *message) {
optional.c   (jackson mowry on 10/17/2024 at 18:56):   return (operation_msg){
optional.c   (jackson mowry on 10/17/2024 at 18:56):       .name = get_operation_msg_name(message),
optional.c   (jackson mowry on 10/17/2024 at 18:56):       .name_count = get_operation_msg_name_length(message),
optional.c   (jackson mowry on 10/17/2024 at 18:56):       .greeting = get_operation_msg_greeting_present(message)
optional.c   (jackson mowry on 10/17/2024 at 18:56):                       ? get_operation_msg_greeting(message)
optional.c   (jackson mowry on 10/17/2024 at 18:56):                       : 0,
optional.c   (jackson mowry on 10/17/2024 at 18:56):       .greeting_count = get_operation_msg_greeting_present(message)
optional.c   (jackson mowry on 10/17/2024 at 18:56):                             ? get_operation_msg_greeting_length(message)
optional.c   (jackson mowry on 10/17/2024 at 18:56):                             : 0,
optional.c   (jackson mowry on 10/17/2024 at 18:56):       .greeting_present = get_operation_msg_greeting_present(message),
optional.c   (jackson mowry on 10/17/2024 at 18:56):       .num = get_operation_msg_num_present(message)
optional.c   (jackson mowry on 10/17/2024 at 18:56):                  ? get_operation_msg_num(message)
optional.c   (jackson mowry on 10/17/2024 at 18:56):                  : 0,
optional.c   (jackson mowry on 10/17/2024 at 18:56):       .num_present = get_operation_msg_num_present(message),
optional.c   (jackson mowry on 10/17/2024 at 18:56):   };
optional.c   (jackson mowry on 10/17/2024 at 18:56): }
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <arpa/inet.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <assert.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdbool.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdint.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdio.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdlib.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <string.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <time.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include <unistd.h>
client.c     (jackson mowry on 10/30/2024 at 17:47): #include "embedded_client.h"
client.c     (jackson mowry on 10/30/2024 at 17:47): #define SERVER_IP "127.0.0.1" // Localhost
client.c     (jackson mowry on 10/30/2024 at 17:47): #define SERVER_PORT 8080      // Port number to connect to
client.c     (jackson mowry on 10/30/2024 at 17:47): #define BUFFER_SIZE 256       // Size of send and receive buffers
client.c     (jackson mowry on 10/30/2024 at 17:47): size_t operation_pack(const operation *struct_operation, u8 **out) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   size_t metadata_size = sizeof(u8) * 3 + ((0 + 7) / 8) * sizeof(u8);
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("%zu\n", metadata_size);
client.c     (jackson mowry on 10/30/2024 at 17:47):   assert(metadata_size == 3);
client.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t optional_index = 0;
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (!*out) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     *out = calloc(1, OPERATION_PACKED_SIZE + metadata_size);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   u8 *optional = *out + 3;
client.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[0] = 0;
client.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[1] = 0;
client.c     (jackson mowry on 10/30/2024 at 17:47):   // operand_one
client.c     (jackson mowry on 10/30/2024 at 17:47):   memcpy(*out + 0 + metadata_size, &struct_operation->operand_one, 4);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // operand_two
client.c     (jackson mowry on 10/30/2024 at 17:47):   memcpy(*out + 4 + metadata_size, &struct_operation->operand_two, 4);
client.c     (jackson mowry on 10/30/2024 at 17:47):   return OPERATION_PACKED_SIZE + metadata_size;
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): i32 get_operation_operand_one(const u8 *message) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   return *(i32 *)(message + 0 + 3);
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): i32 get_operation_operand_two(const u8 *message) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   return *(i32 *)(message + 4 + 3);
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): operation operation_unpack(const u8 *message) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   return (operation){
client.c     (jackson mowry on 10/30/2024 at 17:47):       .operand_one = get_operation_operand_one(message),
client.c     (jackson mowry on 10/30/2024 at 17:47):       .operand_two = get_operation_operand_two(message),
client.c     (jackson mowry on 10/30/2024 at 17:47):   };
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): size_t result_pack(const result *struct_result, u8 **out) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   size_t metadata_size = sizeof(u8) * 3 + ((0 + 7) / 8) * sizeof(u8);
client.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t optional_index = 0;
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (!*out) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     *out = calloc(1, RESULT_PACKED_SIZE + metadata_size);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   u8 *optional = *out + 3;
client.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[0] = 1;
client.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[1] = 0;
client.c     (jackson mowry on 10/30/2024 at 17:47):   // res
client.c     (jackson mowry on 10/30/2024 at 17:47):   memcpy(*out + 0 + metadata_size, &struct_result->res, 4);
client.c     (jackson mowry on 10/30/2024 at 17:47):   return RESULT_PACKED_SIZE + metadata_size;
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): i32 get_result_res(const u8 *message) { return *(i32 *)(message + 0 + 3); }
client.c     (jackson mowry on 10/30/2024 at 17:47): result result_unpack(const u8 *message) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   return (result){
client.c     (jackson mowry on 10/30/2024 at 17:47):       .res = get_result_res(message),
client.c     (jackson mowry on 10/30/2024 at 17:47):   };
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): /*
client.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
client.c     (jackson mowry on 10/30/2024 at 17:47):      */
client.c     (jackson mowry on 10/30/2024 at 17:47): result addition(operation ops) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   int sock;
client.c     (jackson mowry on 10/30/2024 at 17:47):   struct sockaddr_in server_addr;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t *send_buffer = NULL;
client.c     (jackson mowry on 10/30/2024 at 17:47):   size_t send_buffer_size;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t recv_buffer[BUFFER_SIZE];
client.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t bytes_sent, bytes_received;
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer_size = operation_pack(&ops, &send_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer[2] = 0;
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 1: Create a socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   sock = socket(AF_INET, SOCK_STREAM, 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (sock < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Socket creation failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket created successfully.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 2: Prepare the server address structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   memset(&server_addr, 0, sizeof(server_addr)); // Clear the structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_family = AF_INET;             // IPv4
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_port =
client.c     (jackson mowry on 10/30/2024 at 17:47):       htons(SERVER_PORT); // Convert port to network byte order
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Convert IPv4 address from text to binary form
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Invalid address / Address not supported");
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock); // Close the socket before exiting
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Server address set to %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 3: Connect to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Connection failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);                 // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Connected to the server at %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 4: Send data to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sending data: ");
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (size_t i = 0; i < send_buffer_size; i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", send_buffer[i]); // Print data being sent
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_sent = send(sock, send_buffer, sizeof(send_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_sent < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Send failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);           // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sent %zd bytes to the server.\n", bytes_sent);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 5: Receive response from the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_received = recv(sock, recv_buffer, sizeof(recv_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_received < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Receive failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);              // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 6: Print the received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Received %zd bytes from the server: ", bytes_received);
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (ssize_t i = 0; i < bytes_received; i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", recv_buffer[i]); // Print each byte of received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 7: Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   close(sock);
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket closed. Exiting program.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   result ret_val = result_unpack(recv_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   return ret_val;
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): /*
client.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
client.c     (jackson mowry on 10/30/2024 at 17:47):      */
client.c     (jackson mowry on 10/30/2024 at 17:47): result subtraction(operation ops) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   int sock;
client.c     (jackson mowry on 10/30/2024 at 17:47):   struct sockaddr_in server_addr;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t *send_buffer = NULL;
client.c     (jackson mowry on 10/30/2024 at 17:47):   size_t send_buffer_size;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t recv_buffer[BUFFER_SIZE];
client.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t bytes_sent, bytes_received;
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer_size = operation_pack(&ops, &send_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer[2] = 1;
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 1: Create a socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   sock = socket(AF_INET, SOCK_STREAM, 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (sock < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Socket creation failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket created successfully.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 2: Prepare the server address structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   memset(&server_addr, 0, sizeof(server_addr)); // Clear the structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_family = AF_INET;             // IPv4
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_port =
client.c     (jackson mowry on 10/30/2024 at 17:47):       htons(SERVER_PORT); // Convert port to network byte order
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Convert IPv4 address from text to binary form
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Invalid address / Address not supported");
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock); // Close the socket before exiting
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Server address set to %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 3: Connect to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Connection failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);                 // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Connected to the server at %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 4: Send data to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sending data: ");
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (size_t i = 0; i < sizeof(send_buffer); i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", send_buffer[i]); // Print data being sent
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_sent = send(sock, send_buffer, sizeof(send_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_sent < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Send failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);           // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sent %zd bytes to the server.\n", bytes_sent);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 5: Receive response from the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_received = recv(sock, recv_buffer, sizeof(recv_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_received < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Receive failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);              // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 6: Print the received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Received %zd bytes from the server: ", bytes_received);
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (ssize_t i = 0; i < bytes_received; i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", recv_buffer[i]); // Print each byte of received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 7: Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   close(sock);
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket closed. Exiting program.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   result ret_val = result_unpack(recv_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   return ret_val;
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): /*
client.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
client.c     (jackson mowry on 10/30/2024 at 17:47):      */
client.c     (jackson mowry on 10/30/2024 at 17:47): result multiplication(operation ops) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   int sock;
client.c     (jackson mowry on 10/30/2024 at 17:47):   struct sockaddr_in server_addr;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t *send_buffer = NULL;
client.c     (jackson mowry on 10/30/2024 at 17:47):   size_t send_buffer_size;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t recv_buffer[BUFFER_SIZE];
client.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t bytes_sent, bytes_received;
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer_size = operation_pack(&ops, &send_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer[2] = 2;
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 1: Create a socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   sock = socket(AF_INET, SOCK_STREAM, 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (sock < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Socket creation failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket created successfully.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 2: Prepare the server address structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   memset(&server_addr, 0, sizeof(server_addr)); // Clear the structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_family = AF_INET;             // IPv4
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_port =
client.c     (jackson mowry on 10/30/2024 at 17:47):       htons(SERVER_PORT); // Convert port to network byte order
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Convert IPv4 address from text to binary form
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Invalid address / Address not supported");
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock); // Close the socket before exiting
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Server address set to %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 3: Connect to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Connection failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);                 // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Connected to the server at %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 4: Send data to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sending data: ");
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (size_t i = 0; i < sizeof(send_buffer); i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", send_buffer[i]); // Print data being sent
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_sent = send(sock, send_buffer, sizeof(send_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_sent < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Send failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);           // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sent %zd bytes to the server.\n", bytes_sent);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 5: Receive response from the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_received = recv(sock, recv_buffer, sizeof(recv_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_received < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Receive failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);              // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 6: Print the received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Received %zd bytes from the server: ", bytes_received);
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (ssize_t i = 0; i < bytes_received; i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", recv_buffer[i]); // Print each byte of received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 7: Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   close(sock);
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket closed. Exiting program.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   result ret_val = result_unpack(recv_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   return ret_val;
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): /*
client.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
client.c     (jackson mowry on 10/30/2024 at 17:47):      */
client.c     (jackson mowry on 10/30/2024 at 17:47): result division(operation ops) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   int sock;
client.c     (jackson mowry on 10/30/2024 at 17:47):   struct sockaddr_in server_addr;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t *send_buffer = NULL;
client.c     (jackson mowry on 10/30/2024 at 17:47):   size_t send_buffer_size;
client.c     (jackson mowry on 10/30/2024 at 17:47):   uint8_t recv_buffer[BUFFER_SIZE];
client.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t bytes_sent, bytes_received;
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer_size = operation_pack(&ops, &send_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   send_buffer[2] = 3;
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 1: Create a socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   sock = socket(AF_INET, SOCK_STREAM, 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (sock < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Socket creation failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket created successfully.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 2: Prepare the server address structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   memset(&server_addr, 0, sizeof(server_addr)); // Clear the structure
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_family = AF_INET;             // IPv4
client.c     (jackson mowry on 10/30/2024 at 17:47):   server_addr.sin_port =
client.c     (jackson mowry on 10/30/2024 at 17:47):       htons(SERVER_PORT); // Convert port to network byte order
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Convert IPv4 address from text to binary form
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Invalid address / Address not supported");
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock); // Close the socket before exiting
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Server address set to %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 3: Connect to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Connection failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);                 // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Connected to the server at %s:%d.\n", SERVER_IP, SERVER_PORT);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 4: Send data to the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sending data: ");
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (size_t i = 0; i < sizeof(send_buffer); i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", send_buffer[i]); // Print data being sent
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_sent = send(sock, send_buffer, sizeof(send_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_sent < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Send failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);           // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Sent %zd bytes to the server.\n", bytes_sent);
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 5: Receive response from the server
client.c     (jackson mowry on 10/30/2024 at 17:47):   bytes_received = recv(sock, recv_buffer, sizeof(recv_buffer), 0);
client.c     (jackson mowry on 10/30/2024 at 17:47):   if (bytes_received < 0) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     perror("Receive failed"); // Print error message
client.c     (jackson mowry on 10/30/2024 at 17:47):     close(sock);              // Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):     exit(1);
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 6: Print the received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Received %zd bytes from the server: ", bytes_received);
client.c     (jackson mowry on 10/30/2024 at 17:47):   for (ssize_t i = 0; i < bytes_received; i++) {
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%02x ", recv_buffer[i]); // Print each byte of received data
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   // Step 7: Close the socket
client.c     (jackson mowry on 10/30/2024 at 17:47):   close(sock);
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Socket closed. Exiting program.\n");
client.c     (jackson mowry on 10/30/2024 at 17:47):   result ret_val = result_unpack(recv_buffer);
client.c     (jackson mowry on 10/30/2024 at 17:47):   return ret_val;
client.c     (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/30/2024 at 17:47): int main() {
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Select an operation (+,-,*,/): ");
client.c     (jackson mowry on 10/30/2024 at 17:47):   char op;
client.c     (jackson mowry on 10/30/2024 at 17:47):   scanf("%c", &op);
client.c     (jackson mowry on 10/30/2024 at 17:47):   int one, two;
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Operand 1: ");
client.c     (jackson mowry on 10/30/2024 at 17:47):   scanf("%d", &one);
client.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Operand 2: ");
client.c     (jackson mowry on 10/30/2024 at 17:47):   scanf("%d", &two);
client.c     (jackson mowry on 10/30/2024 at 17:47):   switch (op) {
client.c     (jackson mowry on 10/30/2024 at 17:47):   case '+':
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%d\n",
client.c     (jackson mowry on 10/30/2024 at 17:47):            addition((operation){.operand_one = one, .operand_two = two}).res);
client.c     (jackson mowry on 10/30/2024 at 17:47):     break;
client.c     (jackson mowry on 10/30/2024 at 17:47):   case '-':
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf(
client.c     (jackson mowry on 10/30/2024 at 17:47):         "%d\n",
client.c     (jackson mowry on 10/30/2024 at 17:47):         subtraction((operation){.operand_one = one, .operand_two = two}).res);
client.c     (jackson mowry on 10/30/2024 at 17:47):     break;
client.c     (jackson mowry on 10/30/2024 at 17:47):   case '*':
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%d\n",
client.c     (jackson mowry on 10/30/2024 at 17:47):            multiplication((operation){.operand_one = one, .operand_two = two})
client.c     (jackson mowry on 10/30/2024 at 17:47):                .res);
client.c     (jackson mowry on 10/30/2024 at 17:47):     break;
client.c     (jackson mowry on 10/30/2024 at 17:47):   case '/':
client.c     (jackson mowry on 10/30/2024 at 17:47):     printf("%d\n",
client.c     (jackson mowry on 10/30/2024 at 17:47):            division((operation){.operand_one = one, .operand_two = two}).res);
client.c     (jackson mowry on 10/30/2024 at 17:47):     break;
client.c     (jackson mowry on 10/30/2024 at 17:47):   }
client.c     (jackson mowry on 10/30/2024 at 17:47):   return 0; // Exit successfully
client.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <arpa/inet.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdbool.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdint.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdio.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <stdlib.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <string.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <time.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include <unistd.h>
server.c     (jackson mowry on 10/30/2024 at 17:47): #include "embedded.h"
server.c     (jackson mowry on 10/30/2024 at 17:47): size_t operation_pack(const operation *struct_operation, u8 **out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   size_t metadata_size = sizeof(u8) * 3 + ((0 + 7) / 8) * sizeof(u8);
server.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t optional_index = 0;
server.c     (jackson mowry on 10/30/2024 at 17:47):   if (!*out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):     *out = calloc(1, OPERATION_PACKED_SIZE + metadata_size);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   u8 *optional = *out + 3;
server.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[0] = 0;
server.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[1] = 0;
server.c     (jackson mowry on 10/30/2024 at 17:47):   // operand_one
server.c     (jackson mowry on 10/30/2024 at 17:47):   memcpy(*out + 0 + metadata_size, &struct_operation->operand_one, 4);
server.c     (jackson mowry on 10/30/2024 at 17:47):   // operand_two
server.c     (jackson mowry on 10/30/2024 at 17:47):   memcpy(*out + 4 + metadata_size, &struct_operation->operand_two, 4);
server.c     (jackson mowry on 10/30/2024 at 17:47):   return OPERATION_PACKED_SIZE + metadata_size;
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): i32 get_operation_operand_one(const u8 *message) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   return *(i32 *)(message + 0 + 3);
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): i32 get_operation_operand_two(const u8 *message) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   return *(i32 *)(message + 4 + 3);
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): operation operation_unpack(const u8 *message) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   return (operation){
server.c     (jackson mowry on 10/30/2024 at 17:47):       .operand_one = get_operation_operand_one(message),
server.c     (jackson mowry on 10/30/2024 at 17:47):       .operand_two = get_operation_operand_two(message),
server.c     (jackson mowry on 10/30/2024 at 17:47):   };
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): size_t result_pack(const result *struct_result, u8 **out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   size_t metadata_size = sizeof(u8) * 3 + ((0 + 7) / 8) * sizeof(u8);
server.c     (jackson mowry on 10/30/2024 at 17:47):   ssize_t optional_index = 0;
server.c     (jackson mowry on 10/30/2024 at 17:47):   if (!*out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):     *out = calloc(1, RESULT_PACKED_SIZE + metadata_size);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   u8 *optional = *out + 3;
server.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[0] = 1;
server.c     (jackson mowry on 10/30/2024 at 17:47):   (*out)[1] = 0;
server.c     (jackson mowry on 10/30/2024 at 17:47):   // res
server.c     (jackson mowry on 10/30/2024 at 17:47):   memcpy(*out + 0 + metadata_size, &struct_result->res, 4);
server.c     (jackson mowry on 10/30/2024 at 17:47):   return RESULT_PACKED_SIZE + metadata_size;
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): i32 get_result_res(const u8 *message) { return *(i32 *)(message + 0 + 3); }
server.c     (jackson mowry on 10/30/2024 at 17:47): result result_unpack(const u8 *message) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   return (result){
server.c     (jackson mowry on 10/30/2024 at 17:47):       .res = get_result_res(message),
server.c     (jackson mowry on 10/30/2024 at 17:47):   };
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): /*
server.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
server.c     (jackson mowry on 10/30/2024 at 17:47):      */
server.c     (jackson mowry on 10/30/2024 at 17:47): size_t addition(operation ops, u8 **out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   result return_val;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return_val.res = ops.operand_one + ops.operand_two;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return result_pack(&return_val, out);
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): /*
server.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
server.c     (jackson mowry on 10/30/2024 at 17:47):      */
server.c     (jackson mowry on 10/30/2024 at 17:47): size_t subtraction(operation ops, u8 **out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   result return_val;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return_val.res = ops.operand_one - ops.operand_two;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return result_pack(&return_val, out);
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): /*
server.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
server.c     (jackson mowry on 10/30/2024 at 17:47):      */
server.c     (jackson mowry on 10/30/2024 at 17:47): size_t multiplication(operation ops, u8 **out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   result return_val;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return_val.res = ops.operand_one * ops.operand_two;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return result_pack(&return_val, out);
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): /*
server.c     (jackson mowry on 10/30/2024 at 17:47):       Perform the operation provded and return the result
server.c     (jackson mowry on 10/30/2024 at 17:47):      */
server.c     (jackson mowry on 10/30/2024 at 17:47): size_t division(operation ops, u8 **out) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   result return_val;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return_val.res = ops.operand_one / ops.operand_two;
server.c     (jackson mowry on 10/30/2024 at 17:47):   return result_pack(&return_val, out);
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): #define PORT 8080
server.c     (jackson mowry on 10/30/2024 at 17:47): #define BUFFER_SIZE 1024
server.c     (jackson mowry on 10/30/2024 at 17:47): // Function to handle incoming data
server.c     (jackson mowry on 10/30/2024 at 17:47): size_t handle_request(const u8 *input, u8 **output) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   switch (input[2]) {
server.c     (jackson mowry on 10/30/2024 at 17:47):   case 0: {
server.c     (jackson mowry on 10/30/2024 at 17:47):     operation arg = operation_unpack(input);
server.c     (jackson mowry on 10/30/2024 at 17:47):     return addition(arg, output);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   case 1: {
server.c     (jackson mowry on 10/30/2024 at 17:47):     operation arg = operation_unpack(input);
server.c     (jackson mowry on 10/30/2024 at 17:47):     return subtraction(arg, output);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   case 2: {
server.c     (jackson mowry on 10/30/2024 at 17:47):     operation arg = operation_unpack(input);
server.c     (jackson mowry on 10/30/2024 at 17:47):     return multiplication(arg, output);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   case 3: {
server.c     (jackson mowry on 10/30/2024 at 17:47):     operation arg = operation_unpack(input);
server.c     (jackson mowry on 10/30/2024 at 17:47):     return division(arg, output);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   default:
server.c     (jackson mowry on 10/30/2024 at 17:47):     puts("unsupported operation");
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   return 0;
server.c     (jackson mowry on 10/30/2024 at 17:47): }
server.c     (jackson mowry on 10/30/2024 at 17:47): int main() {
server.c     (jackson mowry on 10/30/2024 at 17:47):   int server_fd, new_socket;
server.c     (jackson mowry on 10/30/2024 at 17:47):   struct sockaddr_in address;
server.c     (jackson mowry on 10/30/2024 at 17:47):   int opt = 1;
server.c     (jackson mowry on 10/30/2024 at 17:47):   int addrlen = sizeof(address);
server.c     (jackson mowry on 10/30/2024 at 17:47):   u8 buffer[BUFFER_SIZE] = {0};
server.c     (jackson mowry on 10/30/2024 at 17:47):   u8 *response = NULL;
server.c     (jackson mowry on 10/30/2024 at 17:47):   // Create socket file descriptor
server.c     (jackson mowry on 10/30/2024 at 17:47):   if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
server.c     (jackson mowry on 10/30/2024 at 17:47):     perror("socket failed");
server.c     (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   // Set socket options
server.c     (jackson mowry on 10/30/2024 at 17:47):   if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
server.c     (jackson mowry on 10/30/2024 at 17:47):     perror("setsockopt");
server.c     (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   // Define the address
server.c     (jackson mowry on 10/30/2024 at 17:47):   address.sin_family = AF_INET;
server.c     (jackson mowry on 10/30/2024 at 17:47):   address.sin_addr.s_addr = INADDR_ANY;
server.c     (jackson mowry on 10/30/2024 at 17:47):   address.sin_port = htons(PORT);
server.c     (jackson mowry on 10/30/2024 at 17:47):   // Bind the socket to the address
server.c     (jackson mowry on 10/30/2024 at 17:47):   if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
server.c     (jackson mowry on 10/30/2024 at 17:47):     perror("bind failed");
server.c     (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   // Listen for incoming connections
server.c     (jackson mowry on 10/30/2024 at 17:47):   if (listen(server_fd, 3) < 0) {
server.c     (jackson mowry on 10/30/2024 at 17:47):     perror("listen");
server.c     (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   printf("Server is listening on port %d\n", PORT);
server.c     (jackson mowry on 10/30/2024 at 17:47):   while (1) {
server.c     (jackson mowry on 10/30/2024 at 17:47):     // Accept a connection
server.c     (jackson mowry on 10/30/2024 at 17:47):     if ((new_socket = accept(server_fd, (struct sockaddr *)&address,
server.c     (jackson mowry on 10/30/2024 at 17:47):                              (socklen_t *)&addrlen)) < 0) {
server.c     (jackson mowry on 10/30/2024 at 17:47):       perror("accept");
server.c     (jackson mowry on 10/30/2024 at 17:47):       exit(EXIT_FAILURE);
server.c     (jackson mowry on 10/30/2024 at 17:47):     }
server.c     (jackson mowry on 10/30/2024 at 17:47):     // Read data from the client
server.c     (jackson mowry on 10/30/2024 at 17:47):     int bytes_read = read(new_socket, buffer, BUFFER_SIZE);
server.c     (jackson mowry on 10/30/2024 at 17:47):     if (bytes_read < 0) {
server.c     (jackson mowry on 10/30/2024 at 17:47):       perror("read");
server.c     (jackson mowry on 10/30/2024 at 17:47):       close(new_socket);
server.c     (jackson mowry on 10/30/2024 at 17:47):       continue;
server.c     (jackson mowry on 10/30/2024 at 17:47):     }
server.c     (jackson mowry on 10/30/2024 at 17:47):     // Null terminate the received data
server.c     (jackson mowry on 10/30/2024 at 17:47):     buffer[bytes_read] = '\0';
server.c     (jackson mowry on 10/30/2024 at 17:47):     // Handle the request
server.c     (jackson mowry on 10/30/2024 at 17:47):     size_t response_size = handle_request(buffer, &response);
server.c     (jackson mowry on 10/30/2024 at 17:47):     // Send the response back to the client
server.c     (jackson mowry on 10/30/2024 at 17:47):     send(new_socket, response, response_size, 0);
server.c     (jackson mowry on 10/30/2024 at 17:47):     // Close the socket for this client
server.c     (jackson mowry on 10/30/2024 at 17:47):     close(new_socket);
server.c     (jackson mowry on 10/30/2024 at 17:47):   }
server.c     (jackson mowry on 10/30/2024 at 17:47):   return 0;
server.c     (jackson mowry on 10/30/2024 at 17:47): }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): #include <arpa/inet.h>
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): #include <stdio.h>
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): #include <unistd.h>
c_server.jinja (jackson mowry on 10/17/2024 at 18:56): #include "{{ output_file.split('/')[1].split('.')[0] }}.h"
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   size_t metadata_size = sizeof(u8) * 3 + (({{ message.metadata.optionals_count }} + 7) / 8) * sizeof(u8);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% if has_array_fields.value %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endif %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   u8* optional = *out + 3;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% if has_array_fields.value %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     return variable_space;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% else %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     return {{ message.name.upper() }}_PACKED_SIZE + metadata_size;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endif %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% set metadata_offset = 3 +(message.metadata.optionals_count + 7) // 8 %}
c_server.jinja (jackson mowry on 10/17/2024 at 18:56): {% for procedure in procedures %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   /* {{ procedure.description }} */
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   size_t {{ procedure.name }}(
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% for param in procedure.parameters %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     {{ param.type_field }} {{ param.name }},
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endfor %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   u8 **out
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   ) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   {{ procedure.return_values[0].type_field }} return_val;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   return {{ procedure.return_values[0].type_field }}_pack(&return_val, out);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/17/2024 at 18:56): {% endfor %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): #define PORT 8080
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): #define BUFFER_SIZE 1024
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): // Function to handle incoming data
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): size_t handle_request(const u8 *input, u8 **output) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   switch (input[2]) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     {% for element in procedures %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   case {{ loop.index0 }}: {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     {{ element.parameters[0].type_field }} arg = {{ element.parameters[0].type_field }}_unpack(input);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       return {{ element.name }}(arg, output);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     {% endfor %}
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       default:
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       puts("unsupported operation");
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     return 0;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): int main() {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   int server_fd, new_socket;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   struct sockaddr_in address;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   int opt = 1;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   int addrlen = sizeof(address);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   u8 buffer[BUFFER_SIZE] = {0};
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   u8* response = NULL;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   // Create socket file descriptor
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     perror("socket failed");
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   // Set socket options
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     perror("setsockopt");
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   // Define the address
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   address.sin_family = AF_INET;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   address.sin_addr.s_addr = INADDR_ANY;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   address.sin_port = htons(PORT);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   // Bind the socket to the address
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     perror("bind failed");
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   // Listen for incoming connections
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   if (listen(server_fd, 3) < 0) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     perror("listen");
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     exit(EXIT_FAILURE);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   printf("Server is listening on port %d\n", PORT);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   while (1) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     // Accept a connection
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     if ((new_socket = accept(server_fd, (struct sockaddr *)&address,
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):                              (socklen_t *)&addrlen)) < 0) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       perror("accept");
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       exit(EXIT_FAILURE);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     // Read data from the client
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     int bytes_read = read(new_socket, buffer, BUFFER_SIZE);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     if (bytes_read < 0) {
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       perror("read");
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       close(new_socket);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):       continue;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     // Null terminate the received data
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     buffer[bytes_read] = '\0';
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     // Handle the request
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     size_t response_size = handle_request(buffer, &response);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     // Send the response back to the client
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     send(new_socket, response, response_size, 0);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     // Close the socket for this client
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):     close(new_socket);
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   }
c_server.jinja (jackson mowry on 10/30/2024 at 17:47):   return 0;
c_server.jinja (jackson mowry on 10/30/2024 at 17:47): }
client.c     (jackson mowry on 10/17/2024 at 18:56): #include "optional.h"
client.c     (jackson mowry on 10/17/2024 at 18:56): #include <fcntl.h>
client.c     (jackson mowry on 10/17/2024 at 18:56): #include <stdint.h>
client.c     (jackson mowry on 10/17/2024 at 18:56): #include <stdio.h>
client.c     (jackson mowry on 10/17/2024 at 18:56): #include <stdlib.h>
client.c     (jackson mowry on 10/17/2024 at 18:56): #include <sys/stat.h>
client.c     (jackson mowry on 10/17/2024 at 18:56): #include <sys/types.h>
client.c     (jackson mowry on 10/17/2024 at 18:56): #include <unistd.h>
client.c     (jackson mowry on 10/17/2024 at 18:56): #define FIFO_PATH "myfifo"
client.c     (jackson mowry on 10/17/2024 at 18:56): #define BUFFER_SIZE 1024
client.c     (jackson mowry on 10/17/2024 at 18:56): int main() {
client.c     (jackson mowry on 10/17/2024 at 18:56):   uint8_t buffer[BUFFER_SIZE];
client.c     (jackson mowry on 10/17/2024 at 18:56):   uint8_t *response = NULL;
client.c     (jackson mowry on 10/17/2024 at 18:56):   // Open the FIFO for reading (blocking)
client.c     (jackson mowry on 10/17/2024 at 18:56):   int fd = open(FIFO_PATH, O_RDONLY);
client.c     (jackson mowry on 10/17/2024 at 18:56):   if (fd == -1) {
client.c     (jackson mowry on 10/17/2024 at 18:56):     perror("Failed to open FIFO for reading");
client.c     (jackson mowry on 10/17/2024 at 18:56):     exit(EXIT_FAILURE);
client.c     (jackson mowry on 10/17/2024 at 18:56):   }
client.c     (jackson mowry on 10/17/2024 at 18:56):   // Receive data from the writer
client.c     (jackson mowry on 10/17/2024 at 18:56):   read(fd, buffer, BUFFER_SIZE);
client.c     (jackson mowry on 10/17/2024 at 18:56):   operation_msg msg = operation_msg_unpack(buffer);
client.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Server sent: %.2s %s %s\n", msg.greeting, msg.name,
client.c     (jackson mowry on 10/17/2024 at 18:56):          msg.num_present ? "Num present" : "Num optional");
client.c     (jackson mowry on 10/17/2024 at 18:56):   // Open the FIFO for writing
client.c     (jackson mowry on 10/17/2024 at 18:56):   fd = open(FIFO_PATH, O_WRONLY);
client.c     (jackson mowry on 10/17/2024 at 18:56):   if (fd == -1) {
client.c     (jackson mowry on 10/17/2024 at 18:56):     perror("Failed to open FIFO for writing");
client.c     (jackson mowry on 10/17/2024 at 18:56):     exit(EXIT_FAILURE);
client.c     (jackson mowry on 10/17/2024 at 18:56):   }
client.c     (jackson mowry on 10/17/2024 at 18:56):   // Send response back to the writer
client.c     (jackson mowry on 10/17/2024 at 18:56):   operation_msg om = {.greeting = "hi",
client.c     (jackson mowry on 10/17/2024 at 18:56):                       .greeting_count = 3,
client.c     (jackson mowry on 10/17/2024 at 18:56):                       .greeting_present = true,
client.c     (jackson mowry on 10/17/2024 at 18:56):                       .num = 400,
client.c     (jackson mowry on 10/17/2024 at 18:56):                       .num_present = true,
client.c     (jackson mowry on 10/17/2024 at 18:56):                       .name = "Server",
client.c     (jackson mowry on 10/17/2024 at 18:56):                       .name_count = strlen("Client") + 1};
client.c     (jackson mowry on 10/17/2024 at 18:56):   size_t bytes = operation_msg_pack(&om, &response);
client.c     (jackson mowry on 10/17/2024 at 18:56):   write(fd, response, bytes);
client.c     (jackson mowry on 10/17/2024 at 18:56):   printf("Reader: Sent response\n");
client.c     (jackson mowry on 10/17/2024 at 18:56):   // Close the writing end
client.c     (jackson mowry on 10/17/2024 at 18:56):   close(fd);
client.c     (jackson mowry on 10/17/2024 at 18:56):   free(response);
client.c     (jackson mowry on 10/17/2024 at 18:56):   return 0;
client.c     (jackson mowry on 10/17/2024 at 18:56): }
optional.h   (jackson mowry on 10/17/2024 at 18:56): #include <stdbool.h>
optional.h   (jackson mowry on 10/17/2024 at 18:56): #include <stdint.h>
optional.h   (jackson mowry on 10/17/2024 at 18:56): #include <stdlib.h>
optional.h   (jackson mowry on 10/17/2024 at 18:56): #include <string.h>
optional.h   (jackson mowry on 10/17/2024 at 18:56): #include <time.h>
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef char *string;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef int64_t i64;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef uint64_t u64;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef int32_t i32;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef uint32_t u32;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef int16_t i16;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef uint16_t u16;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef int8_t i8;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef uint8_t u8;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef time_t timestamp;
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef bool boolean;
optional.h   (jackson mowry on 10/17/2024 at 18:56): #define OPERATION_MSG_PACKED_SIZE 24
optional.h   (jackson mowry on 10/17/2024 at 18:56): typedef struct operation_msg {
optional.h   (jackson mowry on 10/17/2024 at 18:56):   char *name;
optional.h   (jackson mowry on 10/17/2024 at 18:56):   size_t name_count;
optional.h   (jackson mowry on 10/17/2024 at 18:56):   char *greeting;
optional.h   (jackson mowry on 10/17/2024 at 18:56):   size_t greeting_count;
optional.h   (jackson mowry on 10/17/2024 at 18:56):   bool greeting_present;
optional.h   (jackson mowry on 10/17/2024 at 18:56):   i32 num;
optional.h   (jackson mowry on 10/17/2024 at 18:56):   bool num_present;
optional.h   (jackson mowry on 10/17/2024 at 18:56): } operation_msg;
optional.h   (jackson mowry on 10/17/2024 at 18:56): size_t operation_msg_pack(const operation_msg *struct_operation_msg, u8 **out);
optional.h   (jackson mowry on 10/17/2024 at 18:56): char *get_operation_msg_name(const u8 *message);
optional.h   (jackson mowry on 10/17/2024 at 18:56): u32 get_operation_msg_name_length(const u8 *message);
optional.h   (jackson mowry on 10/17/2024 at 18:56): char *get_operation_msg_greeting(const u8 *message);
optional.h   (jackson mowry on 10/17/2024 at 18:56): u32 get_operation_msg_greeting_length(const u8 *message);
optional.h   (jackson mowry on 10/17/2024 at 18:56): bool get_operation_msg_greeting_present(const u8 *message);
optional.h   (jackson mowry on 10/17/2024 at 18:56): i32 get_operation_msg_num(const u8 *message);
optional.h   (jackson mowry on 10/17/2024 at 18:56): bool get_operation_msg_num_present(const u8 *message);
optional.h   (jackson mowry on 10/17/2024 at 18:56): operation_msg operation_msg_unpack(const u8 *message);
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47): <?xml version="1.0" encoding="UTF-8"?>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47): <schema version="1.0.0">
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):   <messages>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):     <message name="child">
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       <fields>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="i64" required="true">another_number</field>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       </fields>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):     </message>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):     <message name="parent">
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       <fields>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="i64" required="true">number</field>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="child" required="true">my_child</field>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       </fields>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):     </message>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):   </messages>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):   <procedures>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):     <procedure name = "add1">
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       <description>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):         Submits a new chat message along with the users authentication token.
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       </description>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       <parameters>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="parent" required="true">value</field>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       </parameters>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       <returns>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="boolean">success</field>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):       </returns>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):     </procedure>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47):   </procedures>
embedded.schemafile (jackson mowry on 10/30/2024 at 17:47): </schema>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47): <?xml version="1.0" encoding="UTF-8"?>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47): <schema version="1.0.0">
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):   <messages>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     <message name="operation">
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <fields>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="i32" required="true">operand_one</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="i32" required="true">operand_two</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </fields>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     </message>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     <message name="result">
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <fields>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="i32" required="true">res</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </fields>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     </message>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):   </messages>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):   <procedures>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     <procedure name = "addition">
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="operation" required="true">ops</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="result">result</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     </procedure>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     <procedure name = "subtraction">
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="operation" required="true">ops</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="result">result</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     </procedure>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     <procedure name = "multiplication">
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="operation" required="true">ops</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="result">result</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     </procedure>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     <procedure name = "division">
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         Perform the operation provded and return the result
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </description>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="operation" required="true">ops</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </parameters>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       <returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):         <field type="result">result</field>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):       </returns>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):     </procedure>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47):   </procedures>
arithmetic.schemafile (jackson mowry on 10/30/2024 at 17:47): </schema>
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdint.h>
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <string.h>
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdbool.h>
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <time.h>
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdlib.h>
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef char* string;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int64_t i64;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint64_t u64;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int32_t i32;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint32_t u32;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int16_t i16;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint16_t u16;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int8_t i8;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint8_t u8;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef time_t timestamp;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef bool boolean;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% for message in messages -%}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): #define {{ message.name.upper() }}_PACKED_SIZE {{ message.base_size }}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   typedef struct {{ message.name }} {
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if field.array %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {{ field.type_field }}* {{ field.name }};
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       size_t {{ field.name}}_count;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% elif field.padding %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% else %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {{ field.type_field }} {{ field.name }};
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if not field.required and not field.padding%}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       bool {{ field.name }}_present;
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   } {{message.name}};
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% endfor %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% for message in messages -%}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   size_t {{ message.name }}_pack(const {{ message.name }}* struct_{{ message.name }}, u8** out);
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if not field.padding %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if field.array %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):         {{ field.type_field }}* get_{{message.name}}_{{ field.name }}(const u8* message);
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):         u32 get_{{message.name}}_{{field.name}}_length(const u8* message);
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% else %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):         {{ field.type_field }} get_{{message.name}}_{{ field.name }}(const u8* message);
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if not field.required %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):         bool get_{{ message.name }}_{{ field.name }}_present(const u8* message);
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {{ message.name }} {{ message.name }}_unpack(const u8* message);
c_server_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% endfor %}
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47): {% for procedure in procedures %}
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):   /* {{ procedure.description }} */
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):   size_t {{ procedure.name }}(
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):   {% for param in procedure.parameters %}
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):     {{ param.type_field }} {{ param.name }},
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endfor %}
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):   u8 **out
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):   );
c_server_h.jinja (jackson mowry on 10/30/2024 at 17:47):   {% endfor %}
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): #include <stdint.h>
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): #include <string.h>
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): #include <stdbool.h>
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): #include <time.h>
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): #include <stdlib.h>
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef char* string;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef int64_t i64;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef uint64_t u64;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef int32_t i32;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef uint32_t u32;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef int16_t i16;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef uint16_t u16;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef int8_t i8;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef uint8_t u8;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef time_t timestamp;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): typedef bool boolean;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): #define OPERATION_PACKED_SIZE 8
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):   typedef struct operation {
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):       i32 operand_one;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):       i32 operand_two;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):   } operation;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): #define RESULT_PACKED_SIZE 4
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):   typedef struct result {
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):       i32 res;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):   } result;
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): size_t operation_pack(const operation* struct_operation, u8** out);
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):         i32 get_operation_operand_one(const u8* message);
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):         i32 get_operation_operand_two(const u8* message);
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):   operation operation_unpack(const u8* message);
embedded_client.h (jackson mowry on 10/30/2024 at 17:47): size_t result_pack(const result* struct_result, u8** out);
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):         i32 get_result_res(const u8* message);
embedded_client.h (jackson mowry on 10/30/2024 at 17:47):   result result_unpack(const u8* message);
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdint.h>
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <string.h>
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdbool.h>
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <time.h>
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): #include <stdlib.h>
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef char* string;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int64_t i64;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint64_t u64;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int32_t i32;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint32_t u32;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int16_t i16;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint16_t u16;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef int8_t i8;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef uint8_t u8;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef time_t timestamp;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): typedef bool boolean;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% for message in messages -%}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): #define {{ message.name.upper() }}_PACKED_SIZE {{ message.base_size }}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   typedef struct {{ message.name }} {
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if field.array %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {{ field.type_field }}* {{ field.name }};
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       size_t {{ field.name}}_count;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% elif field.padding %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% else %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {{ field.type_field }} {{ field.name }};
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if not field.required and not field.padding%}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       bool {{ field.name }}_present;
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   } {{message.name}};
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% endfor %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% for message in messages -%}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   size_t {{ message.name }}_pack(const {{ message.name }}* struct_{{ message.name }}, u8** out);
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% for field in message.fields %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% if not field.padding %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if field.array %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):         {{ field.type_field }}* get_{{message.name}}_{{ field.name }}(const u8* message);
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):         u32 get_{{message.name}}_{{field.name}}_length(const u8* message);
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% else %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):         {{ field.type_field }} get_{{message.name}}_{{ field.name }}(const u8* message);
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% if not field.required %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):         bool get_{{ message.name }}_{{ field.name }}_present(const u8* message);
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):       {% endif %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):     {% endif %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {% endfor %}
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56):   {{ message.name }} {{ message.name }}_unpack(const u8* message);
c_client_h.jinja (jackson mowry on 10/17/2024 at 18:56): {% endfor %}
